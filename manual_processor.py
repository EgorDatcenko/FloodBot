import logging
import requests
import json
from config import BOT_TOKEN, CHANNEL_USERNAME
from database import Database
from content_analyzer import ContentAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ManualContentProcessor:
    def __init__(self):
        self.db = Database()
        self.analyzer = ContentAnalyzer()
        self.base_url = f"https://api.telegram.org/bot{BOT_TOKEN}"
    
    def get_channel_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            url = f"{self.base_url}/getChat"
            response = requests.post(url, json={"chat_id": CHANNEL_USERNAME})
            data = response.json()
            
            if data.get("ok"):
                chat = data["result"]
                logger.info(f"–ö–∞–Ω–∞–ª: {chat['title']} (ID: {chat['id']})")
                return chat
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {data}")
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
            return None
    
    def add_test_content(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        logger.info("–î–æ–±–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...")
        
        test_messages = [
            # –ß–ï–õ–õ–ï–ù–î–ñ–ò
            {
                "message_id": 1001,
                "channel_id": -1002560123534,
                "text": "-------- ‚ö†Ô∏è –ß–ï–õ–ï–ù–î–ñ ‚ö†Ô∏è --------\n\n\"–©–µ–ª–∫—É–Ω—á–∏–∫\"\n\n‚ö†Ô∏è –ò–ù–í–ï–ù–¢–ê–†–¨:\n- –ì–†–ï–¶–ö–ò–ï –û–†–ï–•–ò (üå∞)\n- –ü–ê–õ–¨–¶–´ (–±–æ–ª—å—à–æ–π/—Å—Ä/—É–∫–∞–∑–∞—Ç)\n\n–ù–ï –ó–ê–ë–´–í–ê–ï–ú:\n\"–ú—É–∂–∏—á–∫–∏, –∫–æ–º—É –Ω–µ —Å–ª–∞–±–æ, –∂–¥—É –æ—Ç –≤–∞—Å [–í–ò–î–û–°–´] –∏ [–û—Ç–≤–µ—Ç–Ω—ã–µ ‚ùû –ó–ê–î–ê–ù–ò–Ø] –≤ –∫–æ–º–º–µ–Ω—Ç—ã! #—á–µ–ª–µ–Ω–¥–∂\"",
                "category": "challenges"
            },
            {
                "message_id": 1002,
                "channel_id": -1002560123534,
                "text": "–ù–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ! üí™\n\n#—á–µ–ª–µ–Ω–¥–∂ #–≤—ã–∑–æ–≤ #—Ñ–∏—Ç–Ω–µ—Å",
                "category": "challenges"
            },
            {
                "message_id": 1003,
                "channel_id": -1002560123534,
                "text": "–ß–ï–õ–õ–ï–ù–î–ñ: –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏–∫–µ\n\n–ö—Ç–æ –±–æ–ª—å—à–µ –ø–æ–¥—Ç—è–Ω–µ—Ç—Å—è –∑–∞ –º–∏–Ω—É—Ç—É? #—á–µ–ª–µ–Ω–¥–∂ #–≤—ã–∑–æ–≤",
                "category": "challenges"
            },
            # –°–ò–õ–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´
            {
                "message_id": 1004,
                "channel_id": -1002560123534,
                "text": "–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –∂–∏–º –ª–µ–∂–∞ 120–∫–≥! üí™\n\n#—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã #—Å–∏–ª–∞ #–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                "category": "power_results"
            },
            {
                "message_id": 1005,
                "channel_id": -1002560123534,
                "text": "–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –º–µ—Å—è—Ü: –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å 80–∫–≥ –¥–æ 120–∫–≥\n\n#–ø—Ä–æ–≥—Ä–µ—Å—Å #—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã #—Å–∏–ª–∞",
                "category": "power_results"
            },
            # –°–ü–û–†–¢ –°–û–í–ï–¢–´
            {
                "message_id": 1006,
                "channel_id": -1002560123534,
                "text": "–°–æ–≤–µ—Ç –¥–Ω—è: –≤—Å–µ–≥–¥–∞ —Ä–∞–∑–º–∏–Ω–∞–π—Ç–µ—Å—å –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π!\n\n#—Å–æ–≤–µ—Ç—ã #—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ #—Ç–µ—Ö–Ω–∏–∫–∞",
                "category": "sport_tips"
            },
            {
                "message_id": 1007,
                "channel_id": -1002560123534,
                "text": "–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π - –∑–∞–ª–æ–≥ —É—Å–ø–µ—Ö–∞\n\n#—Ç–µ—Ö–Ω–∏–∫–∞ #—Å–æ–≤–µ—Ç—ã #–ø–æ–¥—Å–∫–∞–∑–∫–∏",
                "category": "sport_tips"
            },
            # –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø
            {
                "message_id": 1008,
                "channel_id": -1002560123534,
                "text": "–û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è! üí™\n\n#—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è #–∫—Ä—É–∂–∫–∏ #–ø—Ä–æ–≥—Ä–µ—Å—Å",
                "category": "exercises"
            },
            {
                "message_id": 1009,
                "channel_id": -1002560123534,
                "text": "–ö–æ–º–ø–ª–µ–∫—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ –ø—Ä–µ—Å—Å\n\n#—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è #—Ñ–∏—Ç–Ω–µ—Å #—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
                "category": "exercises"
            },
            {
                "message_id": 1010,
                "channel_id": -1002560123534,
                "text": "–ö—Ä—É–∂–æ–∫: –∂–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å—Ç–æ—è\n\n#–∫—Ä—É–∂–∫–∏ #—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è #—Ñ–∏—Ç–Ω–µ—Å",
                "category": "exercises"
            },
            # –ú–ï–ú–´
            {
                "message_id": 1011,
                "channel_id": -1002560123534,
                "text": "–ö–æ–≥–¥–∞ –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –¥–æ–¥–µ–ª–∞–ª –≤—Å–µ –ø–æ–¥—Ö–æ–¥—ã üòÖ\n\n#–º–µ–º—ã #—é–º–æ—Ä #—Å–º–µ—Ö",
                "category": "memes"
            },
            {
                "message_id": 1012,
                "channel_id": -1002560123534,
                "text": "–ü—Ä–∏–∫–æ–ª –¥–Ω—è: —Å–ø–æ—Ä—Ç–∑–∞–ª –≤ 6 —É—Ç—Ä–∞\n\n#–ø—Ä–∏–∫–æ–ª—ã #–º–µ–º—ã #—é–º–æ—Ä",
                "category": "memes"
            }
        ]
        
        for msg in test_messages:
            try:
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                category = self.analyzer.categorize_content(msg["text"], "")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                success = self.db.add_content(
                    message_id=msg["message_id"],
                    channel_id=msg["channel_id"],
                    category=category,
                    title="",
                    text=msg["text"],
                    media_type=None,
                    media_file_id=None
                )
                
                if success:
                    category_name = self.analyzer.get_category_name(category)
                    hashtags = self.analyzer.extract_hashtags(msg["text"])
                    hashtags_str = " ".join(hashtags) if hashtags else "–±–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤"
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}' (—Ö–µ—à—Ç–µ–≥–∏: {hashtags_str})")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        
        logger.info("–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    def show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.db.get_stats()
        
        if not stats:
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return
        
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        total = sum(stats.values())
        
        for category, count in stats.items():
            category_name = self.analyzer.get_category_name(category)
            percentage = (count / total * 100) if total > 0 else 0
            logger.info(f"  üìÅ {category_name}: {count} ({percentage:.1f}%)")
        
        logger.info(f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}")
    
    def show_content_by_category(self, category):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        content = self.db.get_content_by_category(category, limit=10)
        category_name = self.analyzer.get_category_name(category)
        
        if not content:
            logger.info(f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –ø—É—Å—Ç–∞")
            return
        
        logger.info(f"üìÅ –ö–æ–Ω—Ç–µ–Ω—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':")
        
        for i, item in enumerate(content, 1):
            title = item['title'] or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
            text_preview = item['text'][:200] + "..." if len(item['text']) > 200 else item['text']
            
            logger.info(f"  {i}. üìù {title}")
            logger.info(f"     {text_preview}")
            logger.info("")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    processor = ManualContentProcessor()
    
    print("üîß –†—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    processor.show_stats()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    print("\nüîÑ –î–æ–±–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...")
    processor.add_test_content()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    processor.show_stats()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    print("\nüìÅ –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    categories = ['challenges', 'power_results', 'sport_tips', 'exercises', 'memes']
    
    for category in categories:
        processor.show_content_by_category(category)
        print("-" * 30)

if __name__ == "__main__":
    main() 