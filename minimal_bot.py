import logging
import requests
import json
import time
from config import BOT_TOKEN, CHANNEL_USERNAME
from database import Database
from content_analyzer import ContentAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class MinimalContentBot:
    def __init__(self):
        self.db = Database()
        self.analyzer = ContentAnalyzer()
        self.base_url = f"https://api.telegram.org/bot{BOT_TOKEN}"
        self.offset = 0
    
    def send_message(self, chat_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API"""
        url = f"{self.base_url}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        if reply_markup:
            data["reply_markup"] = json.dumps(reply_markup)
        
        response = requests.post(url, json=data)
        return response.json()
    
    def edit_message(self, chat_id, message_id, text, reply_markup=None):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API"""
        url = f"{self.base_url}/editMessageText"
        data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "parse_mode": "HTML"
        }
        if reply_markup:
            data["reply_markup"] = json.dumps(reply_markup)
        
        response = requests.post(url, json=data)
        return response.json()
    
    def answer_callback_query(self, callback_query_id, text=""):
        """–û—Ç–≤–µ—Ç –Ω–∞ callback query"""
        url = f"{self.base_url}/answerCallbackQuery"
        data = {
            "callback_query_id": callback_query_id,
            "text": text
        }
        response = requests.post(url, json=data)
        return response.json()
    
    def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        url = f"{self.base_url}/getUpdates"
        params = {
            "offset": self.offset,
            "timeout": 30
        }
        response = requests.get(url, params=params)
        return response.json()
    
    def get_channel_messages(self, limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            chat_url = f"{self.base_url}/getChat"
            chat_response = requests.post(chat_url, json={"chat_id": CHANNEL_USERNAME})
            chat_data = chat_response.json()
            
            if not chat_data.get("ok"):
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ: {chat_data}")
                return []
            
            chat_id = chat_data["result"]["id"]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            messages_url = f"{self.base_url}/getUpdates"
            messages_response = requests.get(messages_url, params={
                "limit": limit,
                "timeout": 1
            })
            messages_data = messages_response.json()
            
            if not messages_data.get("ok"):
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {messages_data}")
                return []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            channel_messages = []
            for update in messages_data.get("result", []):
                if "channel_post" in update:
                    message = update["channel_post"]
                    if message.get("chat", {}).get("id") == chat_id:
                        channel_messages.append(message)
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(channel_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞")
            return channel_messages
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
            return []
    
    def process_historical_content(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        logger.info("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        messages = self.get_channel_messages(limit=100)
        
        for message in messages:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                text = message.get("text", "") or message.get("caption", "")
                
                if not text:
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏
                hashtags = self.analyzer.extract_hashtags(text)
                
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                category = self.analyzer.categorize_content(text, "")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                success = self.db.add_content(
                    message_id=message["message_id"],
                    channel_id=message["chat"]["id"],
                    category=category,
                    title="",
                    text=text,
                    media_type=None,
                    media_file_id=None
                )
                
                if success:
                    category_name = self.analyzer.get_category_name(category)
                    hashtags_str = " ".join(hashtags) if hashtags else "–±–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤"
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}' (—Ö–µ—à—Ç–µ–≥–∏: {hashtags_str})")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.get('message_id')}: {e}")
        
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def create_categories_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        categories = self.analyzer.get_all_categories()
        keyboard = []
        
        for category_key, category_name in categories.items():
            keyboard.append([{
                "text": f"üìÅ {category_name}",
                "callback_data": f"category_{category_key}"
            }])
        
        return {"inline_keyboard": keyboard}
    
    def create_back_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        return {
            "inline_keyboard": [[{
                "text": "üîô –ù–∞–∑–∞–¥",
                "callback_data": "back_to_categories"
            }]]
        }
    
    def handle_start_command(self, chat_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üèãÔ∏è‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fitness Content Sorter Bot!

–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ @nikitaFlooDed –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/categories - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
/hashtags - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ö–µ—à—Ç–µ–≥–∏
/process - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
        """
        
        keyboard = self.create_categories_keyboard()
        return self.send_message(chat_id, welcome_text, keyboard)
    
    def handle_categories_command(self, chat_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /categories"""
        keyboard = self.create_categories_keyboard()
        return self.send_message(chat_id, "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    
    def handle_stats_command(self, chat_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        stats = self.db.get_stats()
        
        if not stats:
            return self.send_message(chat_id, "üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
        total = sum(stats.values())
        
        for category, count in stats.items():
            category_name = self.analyzer.get_category_name(category)
            percentage = (count / total * 100) if total > 0 else 0
            stats_text += f"üìÅ {category_name}: {count} ({percentage:.1f}%)\n"
        
        stats_text += f"\nüìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}"
        return self.send_message(chat_id, stats_text)
    
    def handle_hashtags_command(self, chat_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /hashtags"""
        hashtags_text = "üè∑Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n"
        
        for category_key, category_name in self.analyzer.get_all_categories().items():
            if category_key != 'other':
                hashtags = self.analyzer.get_hashtags_for_category(category_key)
                hashtags_text += f"üìÅ {category_name}:\n"
                hashtags_text += f"   {' '.join(hashtags)}\n\n"
        
        hashtags_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —Ö–µ—à—Ç–µ–≥–∏ –≤ –ø–æ—Å—Ç–∞—Ö –¥–ª—è —Ç–æ—á–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏!"
        return self.send_message(chat_id, hashtags_text)
    
    def handle_process_command(self, chat_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /process"""
        self.send_message(chat_id, "üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        thread = threading.Thread(target=self.process_historical_content)
        thread.start()
        
        return self.send_message(chat_id, "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ /stats")
    
    def handle_category_callback(self, chat_id, message_id, category):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        content = self.db.get_content_by_category(category, limit=50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
        category_name = self.analyzer.get_category_name(category)
        
        if not content:
            text = f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
            keyboard = self.create_back_keyboard()
            return self.edit_message(chat_id, message_id, text, keyboard)
        
        response = f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
        response += f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(content)}\n\n"
        
        for i, item in enumerate(content, 1):
            title = item['title'] or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            full_text = item['text']
            
            response += f"{i}. üìù {title}\n"
            response += f"   {full_text}\n"
            response += "   " + "‚îÄ" * 50 + "\n\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(response) > 3500:
                response += f"... –∏ –µ—â–µ {len(content) - i} –ø–æ—Å—Ç–æ–≤"
                break
        
        keyboard = self.create_back_keyboard()
        return self.edit_message(chat_id, message_id, response, keyboard)
    
    def handle_back_callback(self, chat_id, message_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
        keyboard = self.create_categories_keyboard()
        return self.edit_message(chat_id, message_id, "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", keyboard)
    
    def process_update(self, update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if "message" in update:
                message = update["message"]
                chat_id = message["chat"]["id"]
                text = message.get("text", "")
                
                if text == "/start":
                    self.handle_start_command(chat_id)
                elif text == "/categories":
                    self.handle_categories_command(chat_id)
                elif text == "/stats":
                    self.handle_stats_command(chat_id)
                elif text == "/hashtags":
                    self.handle_hashtags_command(chat_id)
                elif text == "/process":
                    self.handle_process_command(chat_id)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
            elif "callback_query" in update:
                callback_query = update["callback_query"]
                chat_id = callback_query["message"]["chat"]["id"]
                message_id = callback_query["message"]["message_id"]
                callback_query_id = callback_query["id"]
                data = callback_query["data"]
                
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
                self.answer_callback_query(callback_query_id)
                
                if data.startswith("category_"):
                    category = data.replace("category_", "")
                    self.handle_category_callback(chat_id, message_id, category)
                elif data == "back_to_categories":
                    self.handle_back_callback(chat_id, message_id)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Fitness Content Sorter Bot...")
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                response = self.get_updates()
                
                if response.get("ok"):
                    updates = response.get("result", [])
                    
                    for update in updates:
                        self.process_update(update)
                        self.offset = update["update_id"] + 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                time.sleep(1)
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(5)

if __name__ == "__main__":
    bot = MinimalContentBot()
    bot.run() 