import asyncio
import logging
from telegram import Bot
from telegram.error import TelegramError
from config import BOT_TOKEN, CHANNEL_USERNAME
from content_analyzer import ContentAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class HashtagAnalyzer:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.analyzer = ContentAnalyzer()
    
    async def analyze_channel_hashtags(self, limit: int = 50):
        """
        –ê–Ω–∞–ª–∏–∑ —Ö–µ—à—Ç–µ–≥–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞
        """
        try:
            logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ö–µ—à—Ç–µ–≥–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ {CHANNEL_USERNAME}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            chat = await self.bot.get_chat(CHANNEL_USERNAME)
            logger.info(f"–ö–∞–Ω–∞–ª: {chat.title} (ID: {chat.id})")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
            messages = []
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                updates = await self.bot.get_updates(limit=limit)
                for update in updates:
                    if update.channel_post:
                        messages.append(update.channel_post)
                    elif update.message and update.message.chat.type == 'channel':
                        messages.append(update.message)
                
                # –ï—Å–ª–∏ —á–µ—Ä–µ–∑ updates –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±
                if not messages:
                    logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥...")
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ID
                        last_message = await self.bot.get_chat_history(chat.id, limit=1)
                        if last_message:
                            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                            for i in range(min(limit, 20)):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
                                try:
                                    message = await self.bot.get_chat_history(chat.id, limit=1, offset=i)
                                    if message:
                                        messages.extend(message)
                                    await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                                except Exception as e:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {i}: {e}")
                                    break
                    except Exception as e:
                        logger.warning(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                messages = []
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–µ—à—Ç–µ–≥–∏
            all_hashtags = {}
            categorized_messages = {}
            uncategorized_messages = []
            
            for i, message in enumerate(messages, 1):
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                    title, text = self.analyzer.extract_text_content(message)
                    full_text = f"{title} {text}"
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏
                    hashtags = self.analyzer.extract_hashtags(full_text)
                    
                    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    category = self.analyzer.categorize_content(text, title)
                    category_name = self.analyzer.get_category_name(category)
                    
                    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö–µ—à—Ç–µ–≥–æ–≤
                    for hashtag in hashtags:
                        if hashtag not in all_hashtags:
                            all_hashtags[hashtag] = 0
                        all_hashtags[hashtag] += 1
                    
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    if category != 'other':
                        if category not in categorized_messages:
                            categorized_messages[category] = []
                        categorized_messages[category].append({
                            'message_id': message.message_id,
                            'hashtags': hashtags,
                            'category': category_name,
                            'text_preview': full_text[:100] + "..." if len(full_text) > 100 else full_text
                        })
                    else:
                        uncategorized_messages.append({
                            'message_id': message.message_id,
                            'hashtags': hashtags,
                            'text_preview': full_text[:100] + "..." if len(full_text) > 100 else full_text
                        })
                    
                    logger.info(f"[{i}/{len(messages)}] ID: {message.message_id}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}, –•–µ—à—Ç–µ–≥–∏: {hashtags}")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}: {e}")
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.print_analysis_results(all_hashtags, categorized_messages, uncategorized_messages)
        
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            try:
                await self.bot.close()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    
    def print_analysis_results(self, all_hashtags, categorized_messages, uncategorized_messages):
        """
        –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        """
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –•–ï–®–¢–ï–ì–û–í")
        print("="*60)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö–µ—à—Ç–µ–≥–æ–≤
        if all_hashtags:
            print("\nüè∑Ô∏è –í–°–ï –•–ï–®–¢–ï–ì–ò –í –ö–ê–ù–ê–õ–ï:")
            sorted_hashtags = sorted(all_hashtags.items(), key=lambda x: x[1], reverse=True)
            for hashtag, count in sorted_hashtags:
                print(f"  {hashtag}: {count} —Ä–∞–∑")
        else:
            print("\nüè∑Ô∏è –•–ï–®–¢–ï–ì–ò –ù–ï –ù–ê–ô–î–ï–ù–´")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if categorized_messages:
            print(f"\n‚úÖ –ö–ê–¢–ï–ì–û–†–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ({len(categorized_messages)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π):")
            for category, messages in categorized_messages.items():
                category_name = self.analyzer.get_category_name(category)
                print(f"\nüìÅ {category_name} ({len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π):")
                for msg in messages[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                    hashtags_str = " ".join(msg['hashtags']) if msg['hashtags'] else "–±–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤"
                    print(f"  ID: {msg['message_id']}, –•–µ—à—Ç–µ–≥–∏: {hashtags_str}")
                    print(f"  –¢–µ–∫—Å—Ç: {msg['text_preview']}")
        else:
            print("\n‚úÖ –ö–ê–¢–ï–ì–û–†–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –ù–ï –ù–ê–ô–î–ï–ù–´")
        
        # –ù–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if uncategorized_messages:
            print(f"\n‚ùì –ù–ï–ö–õ–ê–°–°–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ({len(uncategorized_messages)}):")
            for msg in uncategorized_messages[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                hashtags_str = " ".join(msg['hashtags']) if msg['hashtags'] else "–±–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤"
                print(f"  ID: {msg['message_id']}, –•–µ—à—Ç–µ–≥–∏: {hashtags_str}")
                print(f"  –¢–µ–∫—Å—Ç: {msg['text_preview']}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è —Ç–æ—á–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏")
        print("2. –î–æ–±–∞–≤—å—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ö–µ—à—Ç–µ–≥–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ö–µ—à—Ç–µ–≥–∏
        print("\nüè∑Ô∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –•–ï–®–¢–ï–ì–ò:")
        for category_key, category_name in self.analyzer.get_all_categories().items():
            if category_key != 'other':
                hashtags = self.analyzer.get_hashtags_for_category(category_key)
                print(f"  {category_name}: {' '.join(hashtags)}")

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    """
    analyzer = HashtagAnalyzer()
    await analyzer.analyze_channel_hashtags(limit=20)  # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç

if __name__ == "__main__":
    asyncio.run(main()) 