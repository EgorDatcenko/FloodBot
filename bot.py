import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError
from telegram.constants import MessageOriginType
import asyncio
from datetime import datetime

from config import BOT_TOKEN, CHANNEL_USERNAME
from database import Database
from content_analyzer import ContentAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ContentBot:
    def __init__(self):
        self.db = Database()
        self.analyzer = ContentAnalyzer()
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ /start
        self.application.add_handler(CommandHandler("start", self.start_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –º–µ–Ω—é)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.text_message_handler))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
        self.application.add_handler(MessageHandler(filters.ChatType.CHANNEL, self.channel_message_handler))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ –õ–° –±–æ—Ç—É
        self.application.add_handler(MessageHandler(filters.FORWARDED & filters.ChatType.PRIVATE, self.forwarded_message_handler))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üèãÔ∏è‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fitness Content Sorter Bot!

–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ @nikitaFlooDed –∏ –§–ª—É–¥—Å–∫–∏–µ –¢–†–ï–ù–ò –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.

üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
        """
        
        keyboard = self.create_main_keyboard()
        await update.message.reply_text(welcome_text, reply_markup=keyboard)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤...")
        await self.auto_load_new_posts()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.db.update_all_stats()
        total_posts = self.db.get_total_posts_count()
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ: {total_posts}\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π!"
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith("category_"):
            category = data.replace("category_", "")
            await self.show_category_content(query, category)
        elif data == "stats":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.db.update_all_stats()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.db.get_real_stats()  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            total_posts = self.db.get_total_posts_count()
            
            if not stats:
                await query.edit_message_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                return
            
            stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
            
            for category, count in stats.items():
                category_name = self.analyzer.get_category_name(category)
                stats_text += f"üìÅ {category_name}: {count} –ø–æ—Å—Ç–æ–≤\n"
            
            stats_text += f"\nüìà –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}"
            await query.edit_message_text(stats_text)
        elif data == "back_to_main":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            welcome_text = """
üèãÔ∏è‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fitness Content Sorter Bot!

–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ @nikitaFlooDed –∏ –§–ª—É–¥—Å–∫–∏–µ –¢–†–ï–ù–ò –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.

üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
            """
            keyboard = self.create_main_keyboard()
            await query.edit_message_text(welcome_text, reply_markup=keyboard)
        else:
            await query.edit_message_text("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
    
    async def auto_load_new_posts(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            try:
                chat = await self.application.bot.get_chat(CHANNEL_USERNAME)
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
                try:
                    member = await self.application.bot.get_chat_member(CHANNEL_USERNAME, self.application.bot.id)
                    logger.info(f"üë§ –ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {member.status}")
                    
                    if member.status not in ['administrator', 'member']:
                        logger.warning(f"‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ: {member.status}")
                        return
                        
                except Exception as e:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞: {e}")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
                try:
                    logger.info("üì• –ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ get_updates
                    messages = []
                    
                    try:
                        updates = await self.application.bot.get_updates(limit=100, timeout=1)
                        for update_item in updates:
                            if update_item.channel_post and update_item.channel_post.chat.username == CHANNEL_USERNAME.replace('@', ''):
                                messages.append(update_item.channel_post)
                        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ get_updates")
                    except Exception as e:
                        logger.warning(f"‚ùå get_updates –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
                    
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ webhook –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã
                    if not messages:
                        logger.info("üì• –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã...")
                        
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ get_chat
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                            channel_info = await self.application.bot.get_chat(CHANNEL_USERNAME)
                            logger.info(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ: {channel_info.title}, ID: {channel_info.id}")
                            
                            # –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ webhook –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–∞–Ω–∞–ª–∞ —Å–ª–æ–∂–Ω–æ
                            # –ù–æ –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
                            logger.info("‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞ –Ω—É–∂–µ–Ω webhook –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞")
                            
                        except Exception as e:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ: {e}")
                    
                    logger.info(f"üì• –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞")
                    
                    if messages:
                        processed_count = 0
                        for message in messages:
                            try:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç
                                existing_post = self.db.get_content_by_message_id(message.message_id)
                                if existing_post:
                                    logger.info(f"–ü–æ—Å—Ç {message.message_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ")
                                    continue
                                
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                                title, text = self.analyzer.extract_text_content(message)
                                media_type, media_file_id = self.analyzer.extract_media_info(message)
                                
                                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                                category = self.analyzer.categorize_content(text, title)
                                
                                # –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞
                                channel_username = message.chat.username or CHANNEL_USERNAME.replace('@', '')
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                                success = self.db.add_content(
                                    message_id=message.message_id,
                                    channel_id=message.chat.id,
                                    channel_username=channel_username,
                                    category=category,
                                    title=title,
                                    text=text,
                                    media_type=media_type,
                                    media_file_id=media_file_id
                                )
                                
                                if success:
                                    category_name = self.analyzer.get_category_name(category)
                                    logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ—Å—Ç {message.message_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'")
                                    processed_count += 1
                                    
                            except Exception as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}: {e}")
                        
                        if processed_count > 0:
                            logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")
                        else:
                            logger.info("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    else:
                        logger.info("‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        
                except Exception as e:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞–Ω–∞–ª—É: {e}")
                
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
    
    async def show_category_content(self, query, category: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–µ–¥–∏–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
        await self.auto_load_new_posts()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã post_media
        content = self.db.get_content_with_media_files(category, limit=50)
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
        if not content:
            logger.info(f"üìÅ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ get_content_with_media_files, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥")
            content = self.db.get_content_by_category(category, limit=50)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            for item in content:
                media_type = item.get('media_type')
                media_file_id = item.get('media_file_id')
                
                if media_type and media_file_id:
                    # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    item['media_files'] = [{
                        'media_type': media_type,
                        'media_file_id': media_file_id,
                        'media_order': 0
                    }]
                else:
                    item['media_files'] = []
        
        category_name = self.analyzer.get_category_name(category)
        
        logger.info(f"üìÅ –ü–æ–ª—É—á–µ–Ω–æ {len(content)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
        for i, item in enumerate(content, 1):
            media_files = item.get('media_files', [])
            logger.info(f"   {i}. –ü–æ—Å—Ç {item['id']}: '{item['title'][:30]}...' - –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {len(media_files)}")
            if media_files:
                for j, media in enumerate(media_files, 1):
                    logger.info(f"      {j}. {media['media_type']}: {media['media_file_id'][:20]}... (–ø–æ—Ä—è–¥–æ–∫: {media['media_order']})")
        
        if not content:
            await query.edit_message_text(
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –ø–æ–∫–∞ –ø—É—Å—Ç–∞.\n\nüí° –ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ @nikitaFlooDed –∏–ª–∏ –§–ª—É–¥—Å–∫–∏–µ –¢–†–ï–ù–ò –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        await query.edit_message_text(
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(content)}\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ—Å—Ç—ã...",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]])
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç
        for item in content:
            try:
                title = item['title'] or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
                text = item['text'] or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
                message_id = item['message_id']
                channel_id = item.get('channel_id')
                media_files = item.get('media_files', [])
                
                caption = f"üìù <b>{title}</b>\n\n{text}"
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å channel_id
                if channel_id:
                    try:
                        await self.application.bot.forward_message(
                            chat_id=query.from_user.id,
                            from_chat_id=channel_id,
                            message_id=message_id
                        )
                        logger.info(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
                        continue
                    except Exception as forward_error:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ—Å—Ç {message_id}: {forward_error}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —á–µ—Ä–µ–∑ file_id
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏
                if media_files:
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ—Å—Ç {item['id']} —Å {len(media_files)} –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏")
                    if len(media_files) > 1:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
                        logger.info(f"   üì± –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É: {len(media_files)} —Ñ–∞–π–ª–æ–≤")
                        await self._send_media_group(query.from_user.id, media_files, caption)
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –º–µ–¥–∏–∞
                        logger.info(f"   üì± –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –º–µ–¥–∏–∞: {media_files[0]['media_type']}")
                        await self._send_single_media(query.from_user.id, media_files[0], caption)
                else:
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ—Å—Ç {item['id']} –±–µ–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await self.application.bot.send_message(
                        chat_id=query.from_user.id,
                        text=caption,
                        parse_mode='HTML'
                    )
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
                await asyncio.sleep(0.5)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ {item.get('id', 'unknown')}: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–æ—Å—Ç–∞
                try:
                    await self.application.bot.send_message(
                        chat_id=query.from_user.id,
                        text=f"üìù <b>{item.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}</b>\n\n{item.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')}",
                        parse_mode='HTML'
                    )
                except Exception as simple_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–æ—Å—Ç–∞: {simple_error}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
        await query.edit_message_text(
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(content)} –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}'\n\nüîô –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]])
        )
    
    async def _send_single_media(self, chat_id: int, media: dict, caption: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞"""
        media_type = media['media_type']
        media_file_id = media['media_file_id']
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞
            file_info = await self.application.bot.get_file(media_file_id)
            if not file_info or not file_info.file_id:
                raise Exception("–ú–µ–¥–∏–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            
            if media_type == 'video':
                await self.application.bot.send_video(
                    chat_id=chat_id,
                    video=media_file_id,
                    caption=caption,
                    parse_mode='HTML'
                )
            elif media_type == 'photo':
                await self.application.bot.send_photo(
                    chat_id=chat_id,
                    photo=media_file_id,
                    caption=caption,
                    parse_mode='HTML'
                )
            elif media_type == 'animation':
                await self.application.bot.send_animation(
                    chat_id=chat_id,
                    animation=media_file_id,
                    caption=caption,
                    parse_mode='HTML'
                )
            elif media_type == 'audio':
                await self.application.bot.send_audio(
                    chat_id=chat_id,
                    audio=media_file_id,
                    caption=caption,
                    parse_mode='HTML'
                )
            elif media_type == 'document':
                await self.application.bot.send_document(
                    chat_id=chat_id,
                    document=media_file_id,
                    caption=caption,
                    parse_mode='HTML'
                )
            elif media_type == 'voice':
                await self.application.bot.send_voice(
                    chat_id=chat_id,
                    voice=media_file_id,
                    caption=caption,
                    parse_mode='HTML'
                )
            elif media_type == 'video_note':
                await self.application.bot.send_video_note(
                    chat_id=chat_id,
                    video_note=media_file_id
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è video_note
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=caption,
                    parse_mode='HTML'
                )
            elif media_type == 'sticker':
                await self.application.bot.send_sticker(
                    chat_id=chat_id,
                    sticker=media_file_id
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=caption,
                    parse_mode='HTML'
                )
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=caption,
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ {media_type}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            try:
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=f"{caption}\n\n‚ö†Ô∏è –ú–µ–¥–∏–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                    parse_mode='HTML'
                )
            except:
                pass
    
    async def _send_media_group(self, chat_id: int, media_files: list, caption: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
        try:
            from telegram import InputMediaPhoto, InputMediaVideo, InputMediaAnimation, InputMediaAudio, InputMediaDocument
            
            media_group = []
            caption_added = False
            
            for media in media_files:
                media_type = media['media_type']
                media_file_id = media['media_file_id']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞
                try:
                    file_info = await self.application.bot.get_file(media_file_id)
                    if not file_info or not file_info.file_id:
                        continue
                except:
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º caption —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É –º–µ–¥–∏–∞
                current_caption = caption if not caption_added else ""
                caption_added = True
                
                if media_type == 'photo':
                    media_group.append(InputMediaPhoto(
                        media=media_file_id,
                        caption=current_caption,
                        parse_mode='HTML'
                    ))
                elif media_type == 'video':
                    media_group.append(InputMediaVideo(
                        media=media_file_id,
                        caption=current_caption,
                        parse_mode='HTML'
                    ))
                elif media_type == 'animation':
                    media_group.append(InputMediaAnimation(
                        media=media_file_id,
                        caption=current_caption,
                        parse_mode='HTML'
                    ))
                elif media_type == 'audio':
                    media_group.append(InputMediaAudio(
                        media=media_file_id,
                        caption=current_caption,
                        parse_mode='HTML'
                    ))
                elif media_type == 'document':
                    media_group.append(InputMediaDocument(
                        media=media_file_id,
                        caption=current_caption,
                        parse_mode='HTML'
                    ))
            
            if media_group:
                await self.application.bot.send_media_group(
                    chat_id=chat_id,
                    media=media_group
                )
            else:
                # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –º–µ–¥–∏–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=caption,
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=caption,
                parse_mode='HTML'
            )
    
    def create_categories_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        categories = self.analyzer.get_all_categories()
        keyboard = []
        
        for category_key, category_name in categories.items():
            keyboard.append([InlineKeyboardButton(
                f"{category_name}", 
                callback_data=f"category_{category_key}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        return InlineKeyboardMarkup(keyboard)
    
    def create_main_keyboard(self) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —á–µ—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        keyboard = [
            [KeyboardButton("üéØ –ß–ï–õ–õ–ï–ù–î–ñ–ò"), KeyboardButton("üí™ –°–ò–õ–û–í–´–ï")],
            [KeyboardButton("üí° –°–ü–û–†–¢ –°–û–í–ï–¢–´"), KeyboardButton("üòÑ –ú–ï–ú–´")],
            [KeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø"), KeyboardButton("üåä –§–õ–£–î–©–ò–ù–ê")],
            [KeyboardButton("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê"), KeyboardButton("üìÅ –î–†–£–ì–û–ï")]
        ]
        return ReplyKeyboardMarkup(
            keyboard, 
            resize_keyboard=True, 
            one_time_keyboard=False,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é...",
            selective=False
        )
    
    def is_private_chat(self, chat_id) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ chat_id ‚Äî —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç, –∞ –Ω–µ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞."""
        if isinstance(chat_id, int):
            # –í Telegram –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã ‚Äî –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ ID, –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã ‚Äî –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ
            return chat_id > 0
        if isinstance(chat_id, str):
            # –ö–∞–Ω–∞–ª—ã –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å @ –∏–ª–∏ -100
            if chat_id.startswith('@') or chat_id.startswith('-100'):
                return False
        return True

    async def text_message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–µ–Ω—é"""
        text = update.message.text
        
        if text == "üéØ –ß–ï–õ–õ–ï–ù–î–ñ–ò":
            await self.show_category_content_text(update, "challenges")
        elif text == "üí™ –°–ò–õ–û–í–´–ï":
            await self.show_category_content_text(update, "power_results")
        elif text == "üí° –°–ü–û–†–¢ –°–û–í–ï–¢–´":
            await self.show_category_content_text(update, "sport_tips")
        elif text == "üòÑ –ú–ï–ú–´":
            await self.show_category_content_text(update, "memes")
        elif text == "üèãÔ∏è‚Äç‚ôÇÔ∏è –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø":
            await self.show_category_content_text(update, "exercises")
        elif text == "üåä –§–õ–£–î–©–ò–ù–ê":
            await self.show_category_content_text(update, "flood")
        elif text == "üìÅ –î–†–£–ì–û–ï":
            await self.show_category_content_text(update, "other")
        elif text == "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.db.update_all_stats()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.db.get_real_stats()  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            total_posts = self.db.get_total_posts_count()
            
            if not stats:
                await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                return
            
            stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
            
            for category, count in stats.items():
                category_name = self.analyzer.get_category_name(category)
                stats_text += f"üìÅ {category_name}: {count} –ø–æ—Å—Ç–æ–≤\n"
            
            stats_text += f"\nüìà –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}"
            await update.message.reply_text(stats_text)
        else:
            await update.message.reply_text("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
    
    async def get_posts_by_hashtag(self, hashtag: str, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ö–µ—à—Ç–µ–≥–æ–º –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            logger.info(f"üîç –ò—â—É –ø–æ—Å—Ç—ã —Å —Ö–µ—à—Ç–µ–≥–æ–º {hashtag} –≤ –∫–∞–Ω–∞–ª–µ...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            await asyncio.sleep(1)
            
            posts_with_hashtag = []
            
            # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ get_updates
            try:
                updates = await self.application.bot.get_updates(limit=100, timeout=5)
                logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ Telegram")
                
                for update_item in updates:
                    if update_item.channel_post and update_item.channel_post.chat.username == CHANNEL_USERNAME.replace('@', ''):
                        message = update_item.channel_post
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                        title, text = self.analyzer.extract_text_content(message)
                        full_text = f"{title} {text}".lower()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–µ—à—Ç–µ–≥–∞ (—Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
                        hashtag_variants = [
                            hashtag.lower(),
                            hashtag.lower().replace('#', ''),
                            hashtag.lower().replace('#', ' '),
                            hashtag.lower().replace('#', '')
                        ]
                        
                        found = False
                        for variant in hashtag_variants:
                            if variant in full_text:
                                found = True
                                break
                        
                        if found:
                            posts_with_hashtag.append(message)
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç {message.message_id} —Å —Ö–µ—à—Ç–µ–≥–æ–º {hashtag}")
                            if len(posts_with_hashtag) >= limit:
                                break
            except Exception as e:
                logger.warning(f"‚ùå get_updates –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(posts_with_hashtag)} –ø–æ—Å—Ç–æ–≤ —Å —Ö–µ—à—Ç–µ–≥–æ–º {hashtag}")
            return posts_with_hashtag
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ —Å —Ö–µ—à—Ç–µ–≥–æ–º {hashtag}: {e}")
            return []
    
    async def show_category_content_text(self, update: Update, category: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ (—Å –º–µ–¥–∏–∞, –µ—Å–ª–∏ –µ—Å—Ç—å)"""
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
        await self.auto_load_new_posts()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã post_media
        content = self.db.get_content_with_media_files(category, limit=50)
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
        if not content:
            logger.info(f"üìÅ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ get_content_with_media_files, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥")
            content = self.db.get_content_by_category(category, limit=50)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            for item in content:
                media_type = item.get('media_type')
                media_file_id = item.get('media_file_id')
                
                if media_type and media_file_id:
                    # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    item['media_files'] = [{
                        'media_type': media_type,
                        'media_file_id': media_file_id,
                        'media_order': 0
                    }]
                else:
                    item['media_files'] = []
        
        category_name = self.analyzer.get_category_name(category)
        
        if not content:
            # –ï—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö –∏–∑ –∫–∞–Ω–∞–ª–∞
            await update.message.reply_text(
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –ø—É—Å—Ç–∞. –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞..."
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–µ—à—Ç–µ–≥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            hashtag_map = {
                'challenges': '#—á–µ–ª–ª–µ–Ω–¥–∂',
                'memes': '#–º–µ–º—ã',
                'power_results': '#—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
                'sport_tips': '#—Å–æ–≤–µ—Ç—ã',
                'exercises': '#—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
                'flood': '#—Ñ–ª—É–¥',
                'other': '#–¥—Ä—É–≥–æ–µ'
            }
            
            hashtag = hashtag_map.get(category, f'#{category}')
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã —Å —Ö–µ—à—Ç–µ–≥–æ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
            posts = await self.get_posts_by_hashtag(hashtag, limit=10)
            
            if posts:
                await update.message.reply_text(
                    f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ —Å —Ö–µ—à—Ç–µ–≥–æ–º {hashtag} –≤ –∫–∞–Ω–∞–ª–µ"
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
                processed_count = 0
                for message in posts:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç
                        existing_post = self.db.get_content_by_message_id(message.message_id)
                        if existing_post:
                            continue
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                        title, text = self.analyzer.extract_text_content(message)
                        media_type, media_file_id = self.analyzer.extract_media_info(message)
                        media_group_id = getattr(message, 'media_group_id', None)
                        
                        # –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞
                        channel_username = message.chat.username or CHANNEL_USERNAME.replace('@', '')
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        success = self.db.add_content(
                            message_id=message.message_id,
                            channel_id=message.chat.id,
                            channel_username=channel_username,
                            category=category,
                            title=title,
                            text=text,
                            media_type=media_type,
                            media_file_id=media_file_id,
                            media_group_id=media_group_id
                        )
                        
                        if success:
                            processed_count += 1
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞ {message.message_id}: {e}")
                
                if processed_count > 0:
                    await update.message.reply_text(
                        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {processed_count} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'"
                    )
                    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    content = self.db.get_content_by_category(category, limit=50)
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                    for item in content:
                        media_type = item.get('media_type')
                        media_file_id = item.get('media_file_id')
                        
                        if media_type and media_file_id:
                            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                            item['media_files'] = [{
                                'media_type': media_type,
                                'media_file_id': media_file_id,
                                'media_order': 0
                            }]
                        else:
                            item['media_files'] = []
                else:
                    await update.message.reply_text(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'"
                    )
                    return
        
        await update.message.reply_text(
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(content)}\n\n–ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å—Ç—ã..."
        )
        
        for item in content:
            title = item['title'] or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
            text = item['text'] or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
            channel_id = item.get('channel_id')
            media_files = item.get('media_files', [])
            caption = f"üìù <b>{title}</b>\n\n{text}"
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ—Å—Ç {item['message_id']}:")
            logger.info(f"   –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {len(media_files)}")
            for i, media in enumerate(media_files, 1):
                logger.info(f"   {i}. {media['media_type']}: {media['media_file_id'][:20]}...")
            logger.info(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title[:50]}...")
            
            chat_id = update.message.chat.id
            if not self.is_private_chat(chat_id):
                logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –∑–∞–ø—Ä–µ—â–µ–Ω–∞! chat_id={chat_id}")
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É.",
                    parse_mode='HTML'
                )
                continue
                
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å channel_id
                if channel_id:
                    try:
                        await self.application.bot.forward_message(
                            chat_id=chat_id,
                            from_chat_id=channel_id,
                            message_id=item['message_id']
                        )
                        logger.info(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç {item['message_id']} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
                        continue
                    except Exception as forward_error:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ—Å—Ç {item['message_id']}: {forward_error}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —á–µ—Ä–µ–∑ file_id
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏
                if media_files:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≥—Ä—É–ø–ø–æ–π
                    if len(media_files) > 1:
                        await self._send_media_group(chat_id, media_files, caption)
                    else:
                        # –û–¥–∏–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª
                        media = media_files[0]
                        await self._send_single_media(chat_id, media, caption)
                else:
                    # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await self.application.bot.send_message(
                        chat_id=chat_id,
                        text=caption,
                        parse_mode='HTML'
                    )
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ {item.get('message_id', 'unknown')}: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç
                try:
                    await self.application.bot.send_message(
                        chat_id=chat_id,
                        text=f"{caption}\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞",
                        parse_mode='HTML'
                    )
                except:
                    pass
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
        keyboard = self.create_main_keyboard()
        await update.message.reply_text(
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(content)} –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}'\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π!",
            reply_markup=keyboard
        )
    
    async def channel_message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            message = update.channel_post or update.message
            
            if not message:
                logger.warning("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            logger.info(f"üì¢ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: {message.message_id}")
            logger.info(f"   –ö–∞–Ω–∞–ª: {message.chat.title} (@{message.chat.username})")
            logger.info(f"   –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(message).__name__}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            if message.chat.username != CHANNEL_USERNAME.replace('@', ''):
                logger.info(f"   ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {message.chat.username} != {CHANNEL_USERNAME.replace('@', '')}")
                return
            
            logger.info(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
            media_group_id = getattr(message, 'media_group_id', None)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç
            existing_post = None
            if media_group_id:
                # –î–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ media_group_id
                existing_post = self.db.get_content_by_media_group_id(media_group_id)
                if existing_post:
                    logger.info(f"üì± –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ {media_group_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    # –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è - –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ—Å—Ç—É
                    logger.info(f"   üì± –î–æ–±–∞–≤–ª—è—é –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ—Å—Ç—É {existing_post['id']}")
                else:
                    logger.info(f"üì± –ù–æ–≤–∞—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ {media_group_id}")
            else:
                # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ message_id
                existing_post = self.db.get_content_by_message_id(message.message_id)
                if existing_post:
                    logger.info(f"üì± –ü–æ—Å—Ç {message.message_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
            title, text = self.analyzer.extract_text_content(message)
            media_type, media_file_id = self.analyzer.extract_media_info(message)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            hashtags = self.analyzer.extract_hashtags(f"{title} {text}")
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            category = self.analyzer.categorize_content(text, title)
            
            # –í–ê–ñ–ù–û: –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç,
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
            if media_group_id and existing_post:
                category = existing_post['category']
                logger.info(f"üì± –ò—Å–ø–æ–ª—å–∑—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞: {category}")
            
            # –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞
            channel_username = message.chat.username or "unknown_channel"
            
            logger.info(f"   üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title[:50]}...")
            logger.info(f"   üìÑ –¢–µ–∫—Å—Ç: {text[:100]}...")
            logger.info(f"   üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: {hashtags}")
            logger.info(f"   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            logger.info(f"   üé¨ –ú–µ–¥–∏–∞: {media_type}")
            logger.info(f"   üì± –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ ID: {media_group_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = True
            content_id = None
            
            if existing_post and media_group_id:
                # –ü–æ—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ ID
                content_id = existing_post['id']
                logger.info(f"üì± –ò—Å–ø–æ–ª—å–∑—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç {content_id} –¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
                success = self.db.add_content(
                    message_id=message.message_id,
                    channel_id=message.chat.id,
                    channel_username=channel_username,
                    category=category,
                    title=title,
                    text=text,
                    media_type=media_type,
                    media_file_id=media_file_id,
                    media_group_id=media_group_id
                )
                
                if success:
                    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
                    if media_group_id:
                        content = self.db.get_content_by_media_group_id(media_group_id)
                    else:
                        content = self.db.get_content_by_message_id(message.message_id)
                    
                    if content:
                        content_id = content['id']
                        logger.info(f"üì± –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç {content_id}")
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞")
                        success = False
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
            if media_group_id and success and content_id:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
                all_media = self.analyzer.extract_all_media_info(message)
                logger.info(f"   üìä –î–æ–±–∞–≤–ª—è—é {len(all_media)} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –≥—Ä—É–ø–ø—É")
                
                for i, (m_type, m_id) in enumerate(all_media, 1):
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
                        file_info = await self.application.bot.get_file(m_id)
                        if file_info and file_info.file_id:
                            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            self.db.add_media_to_post(content_id, message.message_id, m_type, m_id, i)
                            logger.info(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª {i}: {m_type} - {m_id[:20]}...")
                        else:
                            logger.warning(f"   ‚ö†Ô∏è –ú–µ–¥–∏–∞—Ñ–∞–π–ª {i} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {m_type}")
                    except Exception as e:
                        logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ {i}: {e}")
            
            if success:
                category_name = self.analyzer.get_category_name(category)
                hashtags_str = " ".join(hashtags) if hashtags else "–±–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤"
                
                if media_group_id and existing_post:
                    action_text = "–¥–æ–±–∞–≤–ª–µ–Ω—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∫ –ø–æ—Å—Ç—É"
                elif media_group_id:
                    action_text = "—Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç —Å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–æ–π"
                else:
                    action_text = "–¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å—Ç"
                
                logger.info(f"‚úÖ {action_text} {message.message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_username} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}' (—Ö–µ—à—Ç–µ–≥–∏: {hashtags_str})")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
            if message:
                logger.error(f"   ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}")
                logger.error(f"   –¢–µ–∫—Å—Ç: {getattr(message, 'text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')}")
                logger.error(f"   –ö–∞–Ω–∞–ª: {getattr(message.chat, 'username', '–ù–µ—Ç username')}")
    
    async def forwarded_message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–µ–¥–∏–∞"""
        message = update.message
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞
            if not message or not hasattr(message, 'forward_origin') or not message.forward_origin:
                logger.info("üì± –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º –∏–∑ –∫–∞–Ω–∞–ª–∞")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø origin
            if message.forward_origin.type != MessageOriginType.CHANNEL:
                await message.reply_text("‚ö†Ô∏è –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
                return

            channel = message.forward_origin.chat
            channel_username = getattr(channel, 'username', None)
            channel_title = getattr(channel, 'title', None)
            orig_message_id = message.forward_origin.message_id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            allowed_channels = ['nikitaFlooDed', '–§–ª—É–¥—Å–∫–∏–µ –¢–†–ï–ù–ò']
            is_allowed = False
            
            if channel_username:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
                if channel_username in allowed_channels:
                    is_allowed = True
            elif channel_title:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞–Ω–∞–ª–∞
                if channel_title in allowed_channels:
                    is_allowed = True
            
            if not is_allowed:
                await message.reply_text(
                    "‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.\n\n"
                    "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤:\n"
                    "‚Ä¢ @nikitaFlooDed (–•–ê–¢–ê—É–§–õ–£–î–ê)\n"
                    "‚Ä¢ –§–ª—É–¥—Å–∫–∏–µ –¢–†–ï–ù–ò"
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
            media_group_id = getattr(message, 'media_group_id', None)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç
            existing_post = None
            if media_group_id:
                # –î–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ media_group_id
                existing_post = self.db.get_content_by_media_group_id(media_group_id)
                if existing_post:
                    logger.info(f"üì± –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ {media_group_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    # –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è - –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ—Å—Ç—É
                    logger.info(f"   üì± –î–æ–±–∞–≤–ª—è—é –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ—Å—Ç—É {existing_post['id']}")
                else:
                    logger.info(f"üì± –ù–æ–≤–∞—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ {media_group_id}")
            else:
                # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ message_id
                existing_post = self.db.get_content_by_message_id(orig_message_id)
                if existing_post:
                    logger.info(f"üì± –ü–æ—Å—Ç {orig_message_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    await message.reply_text("‚úÖ –≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
                    return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            title, text = self.analyzer.extract_text_content(message)
            media_type, media_file_id = self.analyzer.extract_media_info(message)
            
            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üì± –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {orig_message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_username or channel_title}:")
            logger.info(f"   –ú–µ–¥–∏–∞ —Ç–∏–ø: {media_type}")
            logger.info(f"   –ú–µ–¥–∏–∞ file_id: {media_file_id}")
            logger.info(f"   –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ ID: {media_group_id}")
            logger.info(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title[:50]}...")
            logger.info(f"   –¢–µ–∫—Å—Ç: {text[:100]}...")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–µ
            if media_group_id:
                logger.info(f"   üì± –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ ID: {media_group_id}")
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ –∏–∑ –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                all_media = self.analyzer.extract_all_media_info(message)
                logger.info(f"   üìä –í—Å–µ–≥–æ –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø–µ: {len(all_media)}")
                for i, (m_type, m_id) in enumerate(all_media, 1):
                    logger.info(f"   {i}. {m_type}: {m_id[:20]}...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            media_available = False
            if media_type and media_file_id:
                try:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                    if media_type in ['video', 'photo', 'animation', 'audio', 'document', 'voice', 'video_note', 'sticker']:
                        file_info = await self.application.bot.get_file(media_file_id)
                        if file_info and file_info.file_id:
                            media_available = True
                            logger.info(f"   ‚úÖ –ú–µ–¥–∏–∞ –¥–æ—Å—Ç—É–ø–Ω–æ: {file_info.file_id}")
                        else:
                            logger.warning(f"   ‚ö†Ô∏è –ú–µ–¥–∏–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: file_info –ø—É—Å—Ç–æ–π")
                            media_file_id = None
                    else:
                        logger.info(f"   ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {media_type}")
                        media_file_id = None
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è –ú–µ–¥–∏–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
                    media_file_id = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º file_id –µ—Å–ª–∏ –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            elif media_type and not media_file_id:
                logger.info(f"   ‚ö†Ô∏è –ú–µ–¥–∏–∞ {media_type} –µ—Å—Ç—å, –Ω–æ file_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                logger.info(f"   ‚ÑπÔ∏è –ú–µ–¥–∏–∞ –Ω–µ—Ç")
                            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            category = self.analyzer.categorize_content(text, title)
            
            # –í–ê–ñ–ù–û: –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç,
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
            if media_group_id and existing_post:
                category = existing_post['category']
                logger.info(f"üì± –ò—Å–ø–æ–ª—å–∑—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞: {category}")
                            
            # –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞
            channel_username = channel_username or channel_title or "unknown_channel"
                                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ—Å—Ç
            success = True
            content_id = None
            
            if existing_post and media_group_id:
                # –ü–æ—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ ID
                content_id = existing_post['id']
                logger.info(f"üì± –ò—Å–ø–æ–ª—å–∑—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç {content_id} –¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
                success = self.db.add_content(
                    message_id=orig_message_id,
                    channel_id=channel.id,
                    channel_username=channel_username,
                    category=category,
                    title=title,
                    text=text,
                    media_type=media_type,
                    media_file_id=media_file_id,
                    media_group_id=media_group_id
                )
                
                if success:
                    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
                    if media_group_id:
                        content = self.db.get_content_by_media_group_id(media_group_id)
                    else:
                        content = self.db.get_content_by_message_id(orig_message_id)
                    
                    if content:
                        content_id = content['id']
                        logger.info(f"üì± –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç {content_id}")
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞")
                        success = False
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
            if media_group_id and success and content_id:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
                all_media = self.analyzer.extract_all_media_info(message)
                logger.info(f"   üìä –î–æ–±–∞–≤–ª—è—é {len(all_media)} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –≥—Ä—É–ø–ø—É")
                
                for i, (m_type, m_id) in enumerate(all_media, 1):
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
                        file_info = await self.application.bot.get_file(m_id)
                        if file_info and file_info.file_id:
                            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            self.db.add_media_to_post(content_id, orig_message_id, m_type, m_id, i)
                            logger.info(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª {i}: {m_type} - {m_id[:20]}...")
                        else:
                            logger.warning(f"   ‚ö†Ô∏è –ú–µ–¥–∏–∞—Ñ–∞–π–ª {i} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {m_type}")
                    except Exception as e:
                        logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ {i}: {e}")
                                
            if success:
                category_name = self.analyzer.get_category_name(category)
                if media_type and media_file_id and media_available:
                    media_status = f"{media_type} (–¥–æ—Å—Ç—É–ø–Ω–æ)"
                elif media_type and media_file_id:
                    media_status = f"{media_type} (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å)"
                elif media_type:
                    media_status = f"{media_type} (file_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
                else:
                    media_status = "–Ω–µ—Ç"
                    
                if media_group_id and existing_post:
                    # –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ—Å—Ç—É
                    group_info = f"\nüì± –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ—Å—Ç—É —Å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–æ–π: {media_group_id}"
                    action_text = "–¥–æ–±–∞–≤–ª–µ–Ω—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∫ –ø–æ—Å—Ç—É"
                elif media_group_id:
                    # –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç —Å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–æ–π
                    group_info = f"\nüì± –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç —Å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–æ–π: {media_group_id}"
                    action_text = "—Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç"
                else:
                    # –û–±—ã—á–Ω—ã–π –ø–æ—Å—Ç
                    group_info = ""
                    action_text = "–¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å—Ç"
                    
                await message.reply_text(
                    f"‚úÖ {action_text} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'{group_info}\n\n"
                    f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title[:100]}...\n"
                    f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
                    f"üé¨ –ú–µ–¥–∏–∞: {media_status}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}"
                )
                logger.info(f"‚úÖ {action_text} {orig_message_id} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'")
            else:
                await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ {orig_message_id}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def load_all_posts_on_startup(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞...")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            await asyncio.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            try:
                chat = await self.application.bot.get_chat(CHANNEL_USERNAME)
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}, ID: {chat.id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
                try:
                    member = await self.application.bot.get_chat_member(CHANNEL_USERNAME, self.application.bot.id)
                    logger.info(f"üë§ –ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {member.status}")
                    
                    if member.status not in ['administrator', 'member']:
                        logger.warning(f"‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ: {member.status}")
                        return
                        
                except Exception as e:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞: {e}")
                    return
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ get_updates
                messages = []
                try:
                    logger.info("üì• –ü–æ–ª—É—á–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞...")
                    updates = await self.application.bot.get_updates(limit=100, timeout=1)
                    for update_item in updates:
                        if update_item.channel_post and update_item.channel_post.chat.username == CHANNEL_USERNAME.replace('@', ''):
                            messages.append(update_item.channel_post)
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞")
                except Exception as e:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    return
                
                if messages:
                    processed_count = 0
                    for message in messages:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç
                            existing_post = self.db.get_content_by_message_id(message.message_id)
                            if existing_post:
                                logger.info(f"–ü–æ—Å—Ç {message.message_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ")
                                continue
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                            title, text = self.analyzer.extract_text_content(message)
                            media_type, media_file_id = self.analyzer.extract_media_info(message)
                            
                            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                            category = self.analyzer.categorize_content(text, title)
                            
                            # –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞
                            channel_username = message.chat.username or CHANNEL_USERNAME.replace('@', '')
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            success = self.db.add_content(
                                message_id=message.message_id,
                                channel_id=message.chat.id,
                                channel_username=channel_username,
                                category=category,
                                title=title,
                                text=text,
                                media_type=media_type,
                                media_file_id=media_file_id
                            )
                            
                            if success:
                                category_name = self.analyzer.get_category_name(category)
                                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'")
                                processed_count += 1
                                
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}: {e}")
                    
                    logger.info(f"‚úÖ –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞")
                else:
                    logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞–Ω–∞–ª—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
                
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Fitness Content Sorter Bot...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ run_polling
        self.application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )

if __name__ == "__main__":
    bot = ContentBot()
    bot.run() 