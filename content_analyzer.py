import re
import logging
from typing import Dict, List, Tuple
from config import CATEGORY_KEYWORDS, CATEGORIES, CATEGORY_HASHTAGS

logger = logging.getLogger(__name__)

class ContentAnalyzer:
    def __init__(self):
        self.category_keywords = CATEGORY_KEYWORDS
        self.categories = CATEGORIES
        self.category_hashtags = CATEGORY_HASHTAGS
    
    def categorize_content(self, text: str, title: str = "") -> str:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à—Ç–µ–≥–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        """
        if not text and not title:
            return 'other'
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        full_text = f"{title} {text}".lower()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—à–µ)
        hashtag_category = self._categorize_by_hashtags(full_text)
        if hashtag_category:
            return hashtag_category
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keyword_category = self._categorize_by_keywords(full_text)
        if keyword_category:
            return keyword_category
        
        return 'other'
    
    def _categorize_by_hashtags(self, text: str) -> str:
        """
        –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        """
        # –ò—â–µ–º –≤—Å–µ —Ö–µ—à—Ç–µ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        hashtags = re.findall(r'#\w+', text)
        
        if not hashtags:
            return None
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_scores = {}
        
        for category, category_hashtags in self.category_hashtags.items():
            score = 0
            for hashtag in hashtags:
                if hashtag in category_hashtags:
                    score += 2  # –•–µ—à—Ç–µ–≥–∏ –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å
            if score > 0:
                category_scores[category] = score
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –±–∞–ª–ª–æ–º
        if category_scores:
            return max(category_scores, key=category_scores.get)
        
        return None
    
    def _categorize_by_keywords(self, text: str) -> str:
        """
        –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        """
        category_scores = {}
        
        for category, keywords in self.category_keywords.items():
            score = 0
            for keyword in keywords:
                # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤
                pattern = r'\b' + re.escape(keyword) + r'\b'
                matches = re.findall(pattern, text)
                score += len(matches)
            
            if score > 0:
                category_scores[category] = score
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –±–∞–ª–ª–æ–º
        if category_scores:
            return max(category_scores, key=category_scores.get)
        
        return None
    
    def extract_hashtags(self, text: str) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ö–µ—à—Ç–µ–≥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        """
        return re.findall(r'#\w+', text.lower())
    
    def extract_media_info(self, message) -> Tuple[str, str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–∏–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (media_type, media_file_id)
        """
        media_type = None
        media_file_id = None
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            if hasattr(message, 'media_group_id') and message.media_group_id:
                # –≠—Ç–æ —á–∞—Å—Ç—å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –µ–¥–∏–Ω–æ–µ —Ü–µ–ª–æ–µ
                logger.info(f"üì± –ù–∞–π–¥–µ–Ω–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞: {message.media_group_id}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∏–ø –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–¥–∏–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
                if hasattr(message, 'photo') and message.photo:
                    media_type = 'photo'
                    media_file_id = message.photo[-1].file_id
                elif hasattr(message, 'video') and message.video:
                    media_type = 'video'
                    media_file_id = message.video.file_id
                elif hasattr(message, 'animation') and message.animation:
                    media_type = 'animation'
                    media_file_id = message.animation.file_id
                logger.info(f"üì∏ –ú–µ–¥–∏–∞ –∏–∑ –≥—Ä—É–ø–ø—ã: {media_type} - {media_file_id}")
            elif hasattr(message, 'photo') and message.photo:
                # –û–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
                media_type = 'photo'
                media_file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
                logger.info(f"üì∏ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ: {media_file_id}")
            elif hasattr(message, 'video') and message.video:
                media_type = 'video'
                media_file_id = message.video.file_id
                logger.info(f"üé• –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {media_file_id}")
            elif hasattr(message, 'animation') and message.animation:
                media_type = 'animation'
                media_file_id = message.animation.file_id
                logger.info(f"üé¨ –ù–∞–π–¥–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è: {media_file_id}")
            elif hasattr(message, 'audio') and message.audio:
                media_type = 'audio'
                media_file_id = message.audio.file_id
                logger.info(f"üéµ –ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ: {media_file_id}")
            elif hasattr(message, 'document') and message.document:
                media_type = 'document'
                media_file_id = message.document.file_id
                logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {media_file_id}")
            elif hasattr(message, 'voice') and message.voice:
                media_type = 'voice'
                media_file_id = message.voice.file_id
                logger.info(f"üé§ –ù–∞–π–¥–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ: {media_file_id}")
            elif hasattr(message, 'video_note') and message.video_note:
                media_type = 'video_note'
                media_file_id = message.video_note.file_id
                logger.info(f"üìπ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ: {media_file_id}")
            elif hasattr(message, 'sticker') and message.sticker:
                media_type = 'sticker'
                media_file_id = message.sticker.file_id
                logger.info(f"üòÄ –ù–∞–π–¥–µ–Ω —Å—Ç–∏–∫–µ—Ä: {media_file_id}")
            else:
                logger.info("üìù –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")
            media_type = None
            media_file_id = None
        
        return media_type, media_file_id
    
    def extract_all_media_info(self, message) -> List[Tuple[str, str]]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –í–°–ï–• –º–µ–¥–∏–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: [(media_type, media_file_id), ...]
        """
        media_list = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä–æ–≤)
            if hasattr(message, 'photo') and message.photo:
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
                media_list.append(('photo', message.photo[-1].file_id))
                logger.info(f"üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {message.photo[-1].file_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ
            if hasattr(message, 'video') and message.video:
                media_list.append(('video', message.video.file_id))
                logger.info(f"üé• –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {message.video.file_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            if hasattr(message, 'animation') and message.animation:
                media_list.append(('animation', message.animation.file_id))
                logger.info(f"üé¨ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è: {message.animation.file_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–¥–∏–æ
            if hasattr(message, 'audio') and message.audio:
                media_list.append(('audio', message.audio.file_id))
                logger.info(f"üéµ –î–æ–±–∞–≤–ª–µ–Ω–æ –∞—É–¥–∏–æ: {message.audio.file_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            if hasattr(message, 'document') and message.document:
                media_list.append(('document', message.document.file_id))
                logger.info(f"üìÑ –î–æ–±–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {message.document.file_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ
            if hasattr(message, 'voice') and message.voice:
                media_list.append(('voice', message.voice.file_id))
                logger.info(f"üé§ –î–æ–±–∞–≤–ª–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ: {message.voice.file_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ
            if hasattr(message, 'video_note') and message.video_note:
                media_list.append(('video_note', message.video_note.file_id))
                logger.info(f"üìπ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ: {message.video_note.file_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–∫–µ—Ä
            if hasattr(message, 'sticker') and message.sticker:
                media_list.append(('sticker', message.sticker.file_id))
                logger.info(f"üòÄ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä: {message.sticker.file_id}")
            
            if not media_list:
                logger.info("üìù –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–µ–¥–∏–∞: {e}")
        
        return media_list
    
    def extract_text_content(self, message) -> Tuple[str, str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        title = ""
        text = ""
        
        if message.text:
            text = message.text
        elif message.caption:
            text = message.caption
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
        if text:
            lines = text.split('\n')
            if len(lines) > 1:
                title = lines[0].strip()
                text = '\n'.join(lines[1:]).strip()
            else:
                title = text[:100] + "..." if len(text) > 100 else text
                text = ""
        
        return title, text
    
    def get_category_name(self, category_key: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        return self.categories.get(category_key, category_key)
    
    def get_all_categories(self) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        return self.categories
    
    def get_hashtags_for_category(self, category: str) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        return self.category_hashtags.get(category, []) 