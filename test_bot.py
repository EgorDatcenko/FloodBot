#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Fitness Content Sorter Bot
"""

import asyncio
import logging
from config import BOT_TOKEN, CHANNEL_USERNAME
from database import Database
from content_analyzer import ContentAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def test_bot_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Fitness Content Sorter Bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    db = Database()
    analyzer = ContentAnalyzer()
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    print("\nüìã –¢–µ—Å—Ç 1: –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    test_cases = [
        ("#—á–µ–ª–ª–µ–Ω–¥–∂ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –≤—ã–∑–æ–≤—É!", "challenges"),
        ("#—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ú–æ–π –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!", "power_results"),
        ("#—Å–æ–≤–µ—Ç—ã –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è", "sport_tips"),
        ("#—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¢–µ—Ö–Ω–∏–∫–∞ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π", "exercises"),
        ("#–º–µ–º—ã –ó–∞–±–∞–≤–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ –∑–∞–ª–µ", "memes"),
        ("–û–±—ã—á–Ω—ã–π –ø–æ—Å—Ç –±–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤", "other")
    ]
    
    for text, expected_category in test_cases:
        category = analyzer.categorize_content(text)
        category_name = analyzer.get_category_name(category)
        status = "‚úÖ" if category == expected_category else "‚ùå"
        print(f"{status} '{text[:30]}...' ‚Üí {category_name}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\nüóÑÔ∏è –¢–µ—Å—Ç 2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = [
        (1, -100123456789, "challenges", "–ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≤—ã–∑–æ–≤—É #—á–µ–ª–ª–µ–Ω–¥–∂", None, None),
        (2, -100123456789, "power_results", "–ú–æ–π —Ä–µ–∫–æ—Ä–¥", "–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –≤ –∂–∏–º–µ #—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", None, None),
        (3, -100123456789, "sport_tips", "–°–æ–≤–µ—Ç –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ", "–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π #—Å–æ–≤–µ—Ç—ã", None, None),
        (4, -100123456789, "exercises", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–Ω—è", "–¢–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è #—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", None, None),
        (5, -100123456789, "memes", "–ú–µ–º –∏–∑ –∑–∞–ª–∞", "–ó–∞–±–∞–≤–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è #–º–µ–º—ã", None, None),
    ]
    
    for data in test_data:
        success = db.add_content(*data)
        print(f"{'‚úÖ' if success else '‚ùå'} –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {data[0]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = db.get_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(stats)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    for category, count in stats.items():
        category_name = analyzer.get_category_name(category)
        print(f"  {category_name}: {count}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞
    print("\nüîç –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    search_results = db.search_content("—á–µ–ª–ª–µ–Ω–¥–∂", limit=5)
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '—á–µ–ª–ª–µ–Ω–¥–∂'")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à—Ç–µ–≥–æ–≤
    print("\nüè∑Ô∏è –¢–µ—Å—Ç 4: –•–µ—à—Ç–µ–≥–∏")
    
    for category_key in ['challenges', 'power_results', 'sport_tips', 'exercises', 'memes']:
        hashtags = analyzer.get_hashtags_for_category(category_key)
        category_name = analyzer.get_category_name(category_key)
        print(f"  {category_name}: {' '.join(hashtags)}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def test_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    
    if BOT_TOKEN:
        print("‚úÖ BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}")
    
    from config import CATEGORIES, CATEGORY_KEYWORDS, CATEGORY_HASHTAGS
    print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(CATEGORIES)}")
    print(f"üîë –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(CATEGORY_KEYWORDS)}")
    print(f"üè∑Ô∏è –•–µ—à—Ç–µ–≥–æ–≤: {len(CATEGORY_HASHTAGS)}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Fitness Content Sorter Bot")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    test_config()
    
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    asyncio.run(test_bot_functionality()) 