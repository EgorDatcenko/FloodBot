#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
"""

import asyncio
import logging
from telegram import Bot
from telegram.error import TelegramError
from config import BOT_TOKEN, CHANNEL_USERNAME
from database import Database
from content_analyzer import ContentAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ForceProcessor:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.db = Database()
        self.analyzer = ContentAnalyzer()
    
    async def process_all_messages(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–Ω–∞–ª–∞ {CHANNEL_USERNAME}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            chat = await self.bot.get_chat(CHANNEL_USERNAME)
            logger.info(f"üì¢ –ö–∞–Ω–∞–ª: {chat.title} (ID: {chat.id})")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            logger.info("–°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
            await self.create_test_data()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self.show_processing_stats()
        
        except TelegramError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            try:
                await self.bot.close()
            except:
                pass
    
    async def create_test_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        logger.info("üìù –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        test_messages = [
            {
                'message_id': 1,
                'chat_id': -100123456789,
                'title': '–ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è',
                'text': '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≤—ã–∑–æ–≤—É #—á–µ–ª–ª–µ–Ω–¥–∂ üí™',
                'category': 'challenges'
            },
            {
                'message_id': 2,
                'chat_id': -100123456789,
                'title': '–ù–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂',
                'text': '–ù–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ! #—á–µ–ª–µ–Ω–¥–∂ #–≤—ã–∑–æ–≤ #—Ñ–∏—Ç–Ω–µ—Å',
                'category': 'challenges'
            },
            {
                'message_id': 3,
                'chat_id': -100123456789,
                'title': '–ß–µ–ª–ª–µ–Ω–¥–∂ "–©–µ–ª–∫—É–Ω—á–∏–∫"',
                'text': '---------- ‚ö†Ô∏è –ß–ï–õ–ï–ù–î–ñ ‚ö†Ô∏è ----------\n"–©–µ–ª–∫—É–Ω—á–∏–∫"\n–ò–ù–í–ï–ù–¢–ê–†–¨:\n- –ì–†–ï–¶–ö–ò–ï –û–†–ï–•–ò (üå∞)\n- –ü–ê–õ–¨–¶–´ (–±–æ–ª—å—à–æ–π/—Å—Ä/—É–∫–∞–∑–∞—Ç)\n–ù–ï –ó–ê–ë–´–í–ê–ï–ú:\n"–ú—É–∂–∏—á–∫–∏, –∫–æ–º—É –Ω–µ —Å–ª–∞–±–æ, –∂–¥—É –æ—Ç –≤–∞—Å [–í–ò–î–û–°–´] –∏ [–û—Ç–≤–µ—Ç–Ω—ã–µ –ó–ê–î–ê–ù–ò–Ø] –≤ –∫–æ–º–º–µ–Ω—Ç—ã! #—á–µ–ª–µ–Ω–¥–∂"',
                'category': 'challenges'
            },
            {
                'message_id': 4,
                'chat_id': -100123456789,
                'title': '–ú–æ–π —Ä–µ–∫–æ—Ä–¥',
                'text': '–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –≤ –∂–∏–º–µ –ª–µ–∂–∞! #—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã #—Å–∏–ª–∞',
                'category': 'power_results'
            },
            {
                'message_id': 5,
                'chat_id': -100123456789,
                'title': '–°–æ–≤–µ—Ç –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ',
                'text': '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è #—Å–æ–≤–µ—Ç—ã #—Ç–µ—Ö–Ω–∏–∫–∞',
                'category': 'sport_tips'
            }
        ]
        
        for msg in test_messages:
            success = self.db.add_content(
                message_id=msg['message_id'],
                channel_id=msg['chat_id'],
                category=msg['category'],
                title=msg['title'],
                text=msg['text'],
                media_type=None,
                media_file_id=None
            )
            if success:
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç: {msg['title']}")
    
    async def show_processing_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        stats = self.db.get_stats()
        if not stats:
            logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return
        
        total = sum(stats.values())
        logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {total}")
        
        for category, count in stats.items():
            category_name = self.analyzer.get_category_name(category)
            percentage = (count / total * 100) if total > 0 else 0
            logger.info(f"  üìÅ {category_name}: {count} ({percentage:.1f}%)")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    processor = ForceProcessor()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await processor.show_processing_stats()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await processor.process_all_messages()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await processor.show_processing_stats()

if __name__ == "__main__":
    asyncio.run(main()) 