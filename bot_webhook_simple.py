#!/usr/bin/env python3
import os
import logging
import asyncio
from flask import Flask, request, jsonify
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from database import Database
from content_analyzer import ContentAnalyzer
from dotenv import load_dotenv

load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

class ContentBot:
    def __init__(self):
        self.token = os.getenv('BOT_TOKEN')
        if not self.token:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.db = Database()
        self.analyzer = ContentAnalyzer()
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.ALL, self.forwarded_message_handler))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üòÑ –ú–ï–ú–´", callback_data="category_memes")],
            [InlineKeyboardButton("üéØ –ß–ï–õ–õ–ï–ù–î–ñ–ò", callback_data="category_challenges")],
            [InlineKeyboardButton("üí™ –°–ò–õ–û–í–´–ï", callback_data="category_power_results")],
            [InlineKeyboardButton("üí° –°–ü–û–†–¢ –°–û–í–ï–¢–´", callback_data="category_sport_tips")],
            [InlineKeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø", callback_data="category_exercises")],
            [InlineKeyboardButton("üåä –§–õ–£–î–©–ò–ù–ê", callback_data="category_flood")],
            [InlineKeyboardButton("üìÅ –î–†–£–ì–û–ï", callback_data="category_other")]
        ]
        
        await update.message.reply_text(
            "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FloodBot!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = "ü§ñ FloodBot - –ü–æ–º–æ—â—å\n\n–ö–æ–º–∞–Ω–¥—ã:\n/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n–ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ –ø–æ—Å—Ç—ã –±–æ—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!"
        await update.message.reply_text(help_text)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("category_"):
            category = query.data.replace("category_", "")
            await self.show_category_content(query, category)
    
    async def show_category_content(self, query, category: str):
        content = self.db.get_content_by_category(category, limit=5)
        category_name = self.analyzer.get_category_name(category)
        
        if content:
            text = f"üìÅ {category_name}\n\n"
            for i, item in enumerate(content, 1):
                title = item.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50]
                text += f"{i}. {title}...\n"
        else:
            text = f"üìÅ {category_name}\n\n–ü–æ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
        
        await query.edit_message_text(text)
    
    async def forwarded_message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        message = update.message
        
        if not message.forward_from_chat:
            return
        
        category = self.analyzer.analyze_content(message.text or "")
        title = message.text[:100] if message.text else "–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π –ø–æ—Å—Ç"
        
        success = self.db.add_content(
            message_id=message.forward_from_message_id,
            channel_id=message.forward_from_chat.id,
            channel_username=message.forward_from_chat.username,
            category=category,
            title=title,
            text=message.text or ""
        )
        
        if success:
            await message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤: {self.analyzer.get_category_name(category)}")
        else:
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
bot = None

def init_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    global bot
    try:
        bot = ContentBot()
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return False

async def setup_webhook(webhook_url):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await bot.application.initialize()
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        await bot.application.bot.delete_webhook()
        logger.info("üóëÔ∏è –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        await bot.application.bot.set_webhook(url=f"{webhook_url}/webhook")
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}/webhook")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return False

@app.route('/')
def home():
    if bot:
        return jsonify({
            "status": "running", 
            "bot": "FloodBot",
            "webhook_url": os.getenv('WEBHOOK_URL', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        })
    else:
        return jsonify({
            "status": "error",
            "message": "–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        }), 500

@app.route('/webhook', methods=['POST'])
def webhook():
    if not bot:
        return jsonify({"status": "error", "message": "–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}), 500
    
    try:
        update = Update.de_json(request.get_json(), bot.application.bot)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        def run_in_loop():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(bot.application.process_update(update))
                logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            finally:
                loop.close()
        
        import threading
        thread = threading.Thread(target=run_in_loop)
        thread.start()
        thread.join(timeout=30)  # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
        
        return jsonify({"status": "ok"})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/health')
def health():
    if bot:
        return jsonify({"status": "healthy", "bot": "initialized"})
    else:
        return jsonify({"status": "unhealthy", "bot": "not initialized"}), 500

@app.route('/setup')
def setup():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return jsonify({
        "bot_token": "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if os.getenv('BOT_TOKEN') else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
        "webhook_url": os.getenv('WEBHOOK_URL', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'),
        "port": os.environ.get('PORT', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'),
        "bot_initialized": bot is not None
    })

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    port = int(os.environ.get('PORT', 5000))
    webhook_url = os.getenv('WEBHOOK_URL')
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ FloodBot webhook –≤–µ—Ä—Å–∏–∏...")
    logger.info(f"üì° –ü–æ—Ä—Ç: {port}")
    logger.info(f"üåê Webhook URL: {webhook_url}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    if not init_bot():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
        return
    
    if webhook_url:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        try:
            asyncio.run(setup_webhook(webhook_url))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
    else:
        logger.warning("‚ö†Ô∏è WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False)

if __name__ == '__main__':
    main() 