#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

from database import Database
from content_analyzer import ContentAnalyzer

def test_empty_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db = Database()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –ø—É—Å—Ç–∞
    total_posts = db.get_total_posts_count()
    real_stats = db.get_real_stats()
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}")
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(real_stats)}")
    
    if total_posts == 0:
        print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
        return True
    else:
        print("   ‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—É—Å—Ç–∞!")
        return False

def test_media_analyzer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –º–µ–¥–∏–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –º–µ–¥–∏–∞...")
    
    analyzer = ContentAnalyzer()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞)
    class MockMessage:
        def __init__(self):
            self.text = "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å #–º–µ–º"
            self.photo = [MockPhoto()]
            self.media_group_id = "test_group_123"
        
        def hasattr(self, attr):
            return hasattr(self, attr)
    
    class MockPhoto:
        def __init__(self):
            self.file_id = "test_photo_id_123"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ–¥–∏–∞
    mock_message = MockMessage()
    
    print("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ extract_media_info:")
    media_type, media_file_id = analyzer.extract_media_info(mock_message)
    print(f"   –¢–∏–ø –º–µ–¥–∏–∞: {media_type}")
    print(f"   File ID: {media_file_id}")
    
    print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ extract_all_media_info:")
    all_media = analyzer.extract_all_media_info(mock_message)
    print(f"   –í—Å–µ–≥–æ –º–µ–¥–∏–∞: {len(all_media)}")
    for i, (m_type, m_id) in enumerate(all_media, 1):
        print(f"   {i}. {m_type}: {m_id}")
    
    print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ extract_text_content:")
    title, text = analyzer.extract_text_content(mock_message)
    print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
    print(f"   –¢–µ–∫—Å—Ç: {text}")
    
    print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ categorize_content:")
    category = analyzer.categorize_content(text, title)
    category_name = analyzer.get_category_name(category)
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category} ({category_name})")

def test_database_methods():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db = Database()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
    success = db.add_content(
        message_id=12345,
        channel_id=-1001234567890,
        channel_username="test_channel",
        category="memes",
        title="–¢–µ—Å—Ç–æ–≤—ã–π –º–µ–º",
        text="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ #–º–µ–º",
        media_type="photo",
        media_file_id="test_photo_id_123"
    )
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –¥–æ–±–∞–≤–∏–ª—Å—è
    total_posts = db.get_total_posts_count()
    print(f"   –ü–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ: {total_posts}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    post = db.get_content_by_message_id(12345)
    if post:
        print(f"   ‚úÖ –ü–æ—Å—Ç –Ω–∞–π–¥–µ–Ω: {post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
    else:
        print("   ‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    posts = db.get_content_by_category("memes", limit=5)
    print(f"   –ü–æ—Å—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'memes': {len(posts)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = db.get_real_stats()
    print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –ú–ï–î–ò–ê –ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –ø—É—Å—Ç–∞
    if not test_empty_database():
        print("\n‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—É—Å—Ç–∞! –û—á–∏—Å—Ç–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–µ–¥–∏–∞
    test_media_analyzer()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    test_database_methods()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä—É—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å—Ç–æ–≤:")

if __name__ == "__main__":
    main() 