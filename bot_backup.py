import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError
from telegram.constants import MessageOriginType
import asyncio

from config import BOT_TOKEN, CHANNEL_USERNAME
from database import Database
from content_analyzer import ContentAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ContentBot:
    def __init__(self):
        self.db = Database()
        self.analyzer = ContentAnalyzer()
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("categories", self.categories_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("search", self.search_command))
        self.application.add_handler(CommandHandler("hashtags", self.hashtags_command))
        self.application.add_handler(CommandHandler("load_history", self.load_history_command))
        self.application.add_handler(CommandHandler("debug", self.debug_command))
        self.application.add_handler(CommandHandler("category", self.category_command))
        self.application.add_handler(CommandHandler("load_posts", self.load_posts_command))
        self.application.add_handler(CommandHandler("load_hashtag", self.load_hashtag_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
        self.application.add_handler(MessageHandler(filters.ChatType.CHANNEL, self.channel_message_handler))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ –õ–° –±–æ—Ç—É
        self.application.add_handler(MessageHandler(filters.FORWARDED & filters.ChatType.PRIVATE, self.forwarded_message_handler))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üèãÔ∏è‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fitness Content Sorter Bot!

–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ @nikitaFlooDed –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.

üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
        """
        
        keyboard = self.create_main_keyboard()
        await update.message.reply_text(welcome_text, reply_markup=keyboard)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üîç **–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**
/search <–∑–∞–ø—Ä–æ—Å> - –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**
/categories - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

üè∑Ô∏è **–•–µ—à—Ç–µ–≥–∏:**
/hashtags - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/start` –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤
3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç –∏ –ø–µ—Ä–µ—Å–ª–∞—Å—Ç –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

üîÑ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

üìù **–î–ª—è —Ç–æ—á–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö–µ—à—Ç–µ–≥–∏:**
#—á–µ–ª–ª–µ–Ω–¥–∂ #–∫—Ä—É–∂–∫–∏ #—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è #–º–µ–º—ã #–∫—É—Ä—Å—ã #—Å–æ–≤–µ—Ç—ã #–ø—Ä–æ–≥—Ä–µ—Å—Å #—Ü–∏—Ç–∞—Ç—ã

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** 
- –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ @nikitaFlooDed
- –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞
        """
        await update.message.reply_text(help_text)
    
    async def categories_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /categories"""
        keyboard = self.create_categories_keyboard()
        await update.message.reply_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    
    async def hashtags_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /hashtags"""
        hashtags_text = "üè∑Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n"
        
        for category_key, category_name in self.analyzer.get_all_categories().items():
            if category_key != 'other':
                hashtags = self.analyzer.get_hashtags_for_category(category_key)
                hashtags_text += f"üìÅ {category_name}:\n"
                hashtags_text += f"   {' '.join(hashtags)}\n\n"
        
        hashtags_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —Ö–µ—à—Ç–µ–≥–∏ –≤ –ø–æ—Å—Ç–∞—Ö –¥–ª—è —Ç–æ—á–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏!"
        await update.message.reply_text(hashtags_text)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        stats = self.db.get_stats()
        
        if not stats:
            await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return
        
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
        total = sum(stats.values())
        
        for category, count in stats.items():
            category_name = self.analyzer.get_category_name(category)
            percentage = (count / total * 100) if total > 0 else 0
            stats_text += f"üìÅ {category_name}: {count} ({percentage:.1f}%)\n"
        
        stats_text += f"\nüìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}"
        await update.message.reply_text(stats_text)
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
        if not context.args:
            await update.message.reply_text("üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>\n\n–ü—Ä–∏–º–µ—Ä: /search —á–µ–ª–ª–µ–Ω–¥–∂")
            return
        
        query = " ".join(context.args)
        results = self.db.search_content(query, limit=10)
        
        if not results:
            await update.message.reply_text(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        await update.message.reply_text(
            f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(results)}\n\n–ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å—Ç—ã..."
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø–æ—Å—Ç—ã —Å –º–µ–¥–∏–∞
        for item in results:
            title = item['title'] or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
            text = item['text'] or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
            media_type = item.get('media_type')
            media_file_id = item.get('media_file_id')
            category_name = self.analyzer.get_category_name(item['category'])
            
            caption = f"üîç <b>–ü–æ–∏—Å–∫: {query}</b>\nüìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}</b>\n\nüìù <b>{title}</b>\n\n{text}"
            
            chat_id = update.message.chat.id
            if not self.is_private_chat(chat_id):
                logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –∑–∞–ø—Ä–µ—â–µ–Ω–∞! chat_id={chat_id}")
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É.",
                    parse_mode='HTML'
                )
                continue
                
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ–¥–∏–∞
                has_media = media_type and media_file_id
                
                if has_media and media_type == 'video':
                    try:
                        await self.application.bot.send_video(
                            chat_id=chat_id,
                            video=media_file_id,
                            caption=caption,
                            parse_mode='HTML'
                        )
                    except Exception as media_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {media_error}")
                        await update.message.reply_text(
                            f"‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n{caption}",
                            parse_mode='HTML'
                        )
                elif has_media and media_type == 'photo':
                    try:
                        await self.application.bot.send_photo(
                            chat_id=chat_id,
                            photo=media_file_id,
                            caption=caption,
                            parse_mode='HTML'
                        )
                    except Exception as media_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {media_error}")
                        await update.message.reply_text(
                            f"‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n{caption}",
                            parse_mode='HTML'
                        )
                elif has_media and media_type == 'animation':
                    try:
                        await self.application.bot.send_animation(
                            chat_id=chat_id,
                            animation=media_file_id,
                            caption=caption,
                            parse_mode='HTML'
                        )
                    except Exception as media_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∏–º–∞—Ü–∏–∏: {media_error}")
                        await update.message.reply_text(
                            f"‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n{caption}",
                            parse_mode='HTML'
                        )
                else:
                    # –ù–µ—Ç –º–µ–¥–∏–∞ –∏–ª–∏ –º–µ–¥–∏–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
                    await update.message.reply_text(
                        caption,
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç.\n\n{caption}",
                    parse_mode='HTML'
                )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith("category_"):
            category = data.replace("category_", "")
            await self.show_category_content(query, category)
        elif data == "stats":
            await self.stats_command(update, context)
        elif data == "search":
            await query.edit_message_text("üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>\n\n–ü—Ä–∏–º–µ—Ä: /search —á–µ–ª–ª–µ–Ω–¥–∂")
        elif data == "load_posts":
            await self.load_posts_command(update, context)
        elif data == "help":
            await self.help_command(update, context)
        elif data == "back_to_main":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            welcome_text = """
üèãÔ∏è‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fitness Content Sorter Bot!

–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ @nikitaFlooDed –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.

üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
            """
            keyboard = self.create_main_keyboard()
            await query.edit_message_text(welcome_text, reply_markup=keyboard)
        else:
            await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
    
    async def auto_load_new_posts(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            try:
                chat = await self.application.bot.get_chat(CHANNEL_USERNAME)
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                messages = []
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_updates –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    updates = await self.application.bot.get_updates(limit=50, timeout=1)
                    for update_item in updates:
                        if update_item.channel_post and update_item.channel_post.chat.username == CHANNEL_USERNAME.replace('@', ''):
                            messages.append(update_item.channel_post)
                    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞")
                except Exception as e:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    return
                
                if messages:
                    processed_count = 0
                    for message in messages:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç
                            existing_post = self.db.get_content_by_message_id(message.message_id)
                            if existing_post:
                                continue
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                            title, text = self.analyzer.extract_text_content(message)
                            media_type, media_file_id = self.analyzer.extract_media_info(message)
                            
                            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                            category = self.analyzer.categorize_content(text, title)
                            
                            # –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞
                            channel_username = message.chat.username or CHANNEL_USERNAME.replace('@', '')
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            success = self.db.add_content(
                                message_id=message.message_id,
                                channel_id=message.chat.id,
                                channel_username=channel_username,
                                category=category,
                                title=title,
                                text=text,
                                media_type=media_type,
                                media_file_id=media_file_id
                            )
                            
                            if success:
                                category_name = self.analyzer.get_category_name(category)
                                logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ—Å—Ç {message.message_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'")
                                processed_count += 1
                                
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}: {e}")
                    
                    if processed_count > 0:
                        logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞–Ω–∞–ª—É: {e}")
                
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

    async def show_category_content(self, query, category: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–µ–¥–∏–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
        await self.auto_load_new_posts()
        
        content = self.db.get_content_by_category(category, limit=50)
        category_name = self.analyzer.get_category_name(category)
        
        if not content:
            await query.edit_message_text(
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –ø–æ–∫–∞ –ø—É—Å—Ç–∞.\n\nüí° –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /load_history",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        await query.edit_message_text(
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(content)}\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ—Å—Ç—ã...",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]])
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç
        for item in content:
            try:
                title = item['title'] or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
                text = item['text'] or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
                media_type = item.get('media_type')
                media_file_id = item.get('media_file_id')
                message_id = item['message_id']
                
                caption = f"üìù <b>{title}</b>\n\n{text}"
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await self.application.bot.forward_message(
                        chat_id=query.from_user.id,
                        from_chat_id=CHANNEL_USERNAME,
                        message_id=message_id
                    )
                    logger.info(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç {message_id}")
                    continue
                except Exception as forward_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ—Å—Ç {message_id}: {forward_error}")
                
                # –ï—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ file_id
                if media_type and media_file_id:
                    try:
                        if media_type == 'video':
                            await self.application.bot.send_video(
                                chat_id=query.from_user.id,
                                video=media_file_id,
                                caption=caption,
                                parse_mode='HTML'
                            )
                        elif media_type == 'photo':
                            await self.application.bot.send_photo(
                                chat_id=query.from_user.id,
                                photo=media_file_id,
                                caption=caption,
                                parse_mode='HTML'
                            )
                        elif media_type == 'animation':
                            await self.application.bot.send_animation(
                                chat_id=query.from_user.id,
                                animation=media_file_id,
                                caption=caption,
                                parse_mode='HTML'
                            )
                        else:
                            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                            await self.application.bot.send_message(
                                chat_id=query.from_user.id,
                                text=caption,
                                parse_mode='HTML'
                            )
                        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç {message_id} —Å –º–µ–¥–∏–∞ {media_type}")
                    except Exception as media_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ {message_id}: {media_error}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        await self.application.bot.send_message(
                            chat_id=query.from_user.id,
                            text=caption,
                            parse_mode='HTML'
                        )
                else:
                    # –ù–µ—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await self.application.bot.send_message(
                        chat_id=query.from_user.id,
                        text=caption,
                        parse_mode='HTML'
                    )
                    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç {message_id}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ {item.get('message_id', 'unknown')}: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
                try:
                    title = item.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                    text = item.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')
                    await self.application.bot.send_message(
                        chat_id=query.from_user.id,
                        text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞\n\nüìù <b>{title}</b>\n\n{text}",
                        parse_mode='HTML'
                    )
                except:
                    pass
    
    def create_categories_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        categories = self.analyzer.get_all_categories()
        keyboard = []
        
        for category_key, category_name in categories.items():
            keyboard.append([InlineKeyboardButton(
                f"{category_name}", 
                callback_data=f"category_{category_key}"
            )])
        
        return InlineKeyboardMarkup(keyboard)
    
    def create_main_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üéØ –ß–ï–õ–õ–ï–ù–î–ñ–ò", callback_data="category_challenges"),
                InlineKeyboardButton("üí™ –°–ò–õ–û–í–´–ï", callback_data="category_power_results")
            ],
            [
                InlineKeyboardButton("üí° –°–ü–û–†–¢ –°–û–í–ï–¢–´", callback_data="category_sport_tips"),
                InlineKeyboardButton("üòÑ –ú–ï–ú–´", callback_data="category_memes")
            ],
            [
                InlineKeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø", callback_data="category_exercises"),
                InlineKeyboardButton("üåä –§–õ–£–î–©–ò–ù–ê", callback_data="category_flood")
            ],
            [
                InlineKeyboardButton("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê", callback_data="stats"),
                InlineKeyboardButton("üîç –ü–û–ò–°–ö", callback_data="search")
            ],
            [
                InlineKeyboardButton("üîÑ –ó–ê–ì–†–£–ó–ò–¢–¨ –ü–û–°–¢–´", callback_data="load_posts"),
                InlineKeyboardButton("‚ùì –ü–û–ú–û–©–¨", callback_data="help")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def is_private_chat(self, chat_id) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ chat_id ‚Äî —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç, –∞ –Ω–µ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞."""
        if isinstance(chat_id, int):
            # –í Telegram –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã ‚Äî –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ ID, –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã ‚Äî –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ
            return chat_id > 0
        if isinstance(chat_id, str):
            # –ö–∞–Ω–∞–ª—ã –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å @ –∏–ª–∏ -100
            if chat_id.startswith('@') or chat_id.startswith('-100'):
                return False
        return True

    async def get_posts_by_hashtag(self, hashtag: str, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ö–µ—à—Ç–µ–≥–æ–º –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            logger.info(f"üîç –ò—â—É –ø–æ—Å—Ç—ã —Å —Ö–µ—à—Ç–µ–≥–æ–º {hashtag} –≤ –∫–∞–Ω–∞–ª–µ...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            await asyncio.sleep(1)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º timeout
            updates = await self.application.bot.get_updates(limit=50, timeout=5)
            posts_with_hashtag = []
            
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ Telegram")
            
            for update_item in updates:
                if update_item.channel_post and update_item.channel_post.chat.username == CHANNEL_USERNAME.replace('@', ''):
                    message = update_item.channel_post
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    title, text = self.analyzer.extract_text_content(message)
                    full_text = f"{title} {text}".lower()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–µ—à—Ç–µ–≥–∞ (—Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
                    hashtag_variants = [
                        hashtag.lower(),
                        hashtag.lower().replace('#', ''),
                        hashtag.lower().replace('#', ' '),
                        hashtag.lower().replace('#', '')
                    ]
                    
                    found = False
                    for variant in hashtag_variants:
                        if variant in full_text:
                            found = True
                            break
                    
                    if found:
                        posts_with_hashtag.append(message)
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç {message.message_id} —Å —Ö–µ—à—Ç–µ–≥–æ–º {hashtag}")
                        if len(posts_with_hashtag) >= limit:
                            break
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(posts_with_hashtag)} –ø–æ—Å—Ç–æ–≤ —Å —Ö–µ—à—Ç–µ–≥–æ–º {hashtag}")
            return posts_with_hashtag
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ —Å —Ö–µ—à—Ç–µ–≥–æ–º {hashtag}: {e}")
            return []
    
    async def show_category_content_text(self, update: Update, category: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ (—Å –º–µ–¥–∏–∞, –µ—Å–ª–∏ –µ—Å—Ç—å)"""
        content = self.db.get_content_by_category(category, limit=50)
        category_name = self.analyzer.get_category_name(category)
        
        if not content:
            # –ï—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö –∏–∑ –∫–∞–Ω–∞–ª–∞
            await update.message.reply_text(
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –ø—É—Å—Ç–∞. –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞..."
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–µ—à—Ç–µ–≥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            hashtag_map = {
                'challenges': '#—á–µ–ª–ª–µ–Ω–¥–∂',
                'memes': '#–º–µ–º—ã',
                'power_results': '#—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
                'sport_tips': '#—Å–æ–≤–µ—Ç—ã',
                'exercises': '#—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
                'flood': '#—Ñ–ª—É–¥',
                'other': '#–¥—Ä—É–≥–æ–µ'
            }
            
            hashtag = hashtag_map.get(category, f'#{category}')
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã —Å —Ö–µ—à—Ç–µ–≥–æ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
            posts = await self.get_posts_by_hashtag(hashtag, limit=10)
            
            if posts:
                await update.message.reply_text(
                    f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ —Å —Ö–µ—à—Ç–µ–≥–æ–º {hashtag} –≤ –∫–∞–Ω–∞–ª–µ"
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
                processed_count = 0
                for message in posts:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç
                        existing_post = self.db.get_content_by_message_id(message.message_id)
                        if existing_post:
                            continue
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                        title, text = self.analyzer.extract_text_content(message)
                        media_type, media_file_id = self.analyzer.extract_media_info(message)
                        
                        # –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞
                        channel_username = message.chat.username or CHANNEL_USERNAME.replace('@', '')
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        success = self.db.add_content(
                            message_id=message.message_id,
                            channel_id=message.chat.id,
                            channel_username=channel_username,
                            category=category,
                            title=title,
                            text=text,
                            media_type=media_type,
                            media_file_id=media_file_id
                        )
                        
                        if success:
                            processed_count += 1
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞ {message.message_id}: {e}")
                
                if processed_count > 0:
                    await update.message.reply_text(
                        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {processed_count} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'"
                    )
                    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    content = self.db.get_content_by_category(category, limit=50)
                else:
                    await update.message.reply_text(
                        f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –ø–æ–∫–∞ –ø—É—Å—Ç–∞.\n\nüí° –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç —Å —Ö–µ—à—Ç–µ–≥–æ–º {hashtag} –≤ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –∑–¥–µ—Å—å."
                    )
                    return
            else:
                await update.message.reply_text(
                    f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –ø–æ–∫–∞ –ø—É—Å—Ç–∞.\n\nüí° –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç —Å —Ö–µ—à—Ç–µ–≥–æ–º {hashtag} –≤ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –∑–¥–µ—Å—å.\n\nüí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /load_hashtag {hashtag} –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤."
            )
            return
        
        await update.message.reply_text(
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(content)}\n\n–ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å—Ç—ã..."
        )
        
        for item in content:
            title = item['title'] or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
            text = item['text'] or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
            media_type = item.get('media_type')
            media_file_id = item.get('media_file_id')
            caption = f"üìù <b>{title}</b>\n\n{text}"
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ—Å—Ç {item['message_id']}:")
            logger.info(f"   –ú–µ–¥–∏–∞ —Ç–∏–ø: {media_type}")
            logger.info(f"   –ú–µ–¥–∏–∞ file_id: {media_file_id}")
            logger.info(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title[:50]}...")
            
            chat_id = update.message.chat.id
            if not self.is_private_chat(chat_id):
                logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –∑–∞–ø—Ä–µ—â–µ–Ω–∞! chat_id={chat_id}")
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É.",
                    parse_mode='HTML'
                )
                continue
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ–¥–∏–∞
                has_media = media_type and media_file_id
                
                if has_media and media_type == 'video':
                    logger.info(f"   –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ: {media_file_id}")
                    try:
                        await self.application.bot.send_video(
                            chat_id=chat_id,
                            video=media_file_id,
                            caption=caption,
                            parse_mode='HTML'
                        )
                        logger.info(f"   ‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    except Exception as media_error:
                        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {media_error}")
                        await update.message.reply_text(
                            f"‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n{caption}",
                            parse_mode='HTML'
                        )
                elif has_media and media_type == 'photo':
                    logger.info(f"   –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ç–æ: {media_file_id}")
                    try:
                        await self.application.bot.send_photo(
                            chat_id=chat_id,
                            photo=media_file_id,
                            caption=caption,
                            parse_mode='HTML'
                        )
                        logger.info(f"   ‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    except Exception as media_error:
                        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {media_error}")
                        await update.message.reply_text(
                            f"‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n{caption}",
                            parse_mode='HTML'
                        )
                elif has_media and media_type == 'animation':
                    logger.info(f"   –û—Ç–ø—Ä–∞–≤–ª—è—é –∞–Ω–∏–º–∞—Ü–∏—é: {media_file_id}")
                    try:
                        await self.application.bot.send_animation(
                            chat_id=chat_id,
                            animation=media_file_id,
                            caption=caption,
                            parse_mode='HTML'
                        )
                        logger.info(f"   ‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    except Exception as media_error:
                        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∏–º–∞—Ü–∏–∏: {media_error}")
                        await update.message.reply_text(
                            f"‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n{caption}",
                            parse_mode='HTML'
                        )
                else:
                    # –ù–µ—Ç –º–µ–¥–∏–∞ –∏–ª–∏ –º–µ–¥–∏–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
                    if media_type and not media_file_id:
                        logger.info(f"   –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–º–µ–¥–∏–∞ {media_type} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
                    else:
                        logger.info(f"   –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–Ω–µ—Ç –º–µ–¥–∏–∞)")
                    
                    await update.message.reply_text(
                        caption,
                        parse_mode='HTML'
                    )
                    logger.info(f"   ‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"   ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç.\n\n{caption}",
                    parse_mode='HTML'
                )
    
    async def channel_message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            message = update.channel_post or update.message
            
            if not message:
                logger.warning("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            logger.info(f"üì¢ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: {message.message_id}")
            logger.info(f"   –ö–∞–Ω–∞–ª: {message.chat.title} (@{message.chat.username})")
            logger.info(f"   –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(message).__name__}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            if message.chat.username != CHANNEL_USERNAME.replace('@', ''):
                logger.info(f"   ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {message.chat.username} != {CHANNEL_USERNAME.replace('@', '')}")
                return
            
            logger.info(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
            title, text = self.analyzer.extract_text_content(message)
            media_type, media_file_id = self.analyzer.extract_media_info(message)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            hashtags = self.analyzer.extract_hashtags(f"{title} {text}")
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            category = self.analyzer.categorize_content(text, title)
            
            # –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞
            channel_username = message.chat.username or "unknown_channel"
            
            logger.info(f"   üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title[:50]}...")
            logger.info(f"   üìÑ –¢–µ–∫—Å—Ç: {text[:100]}...")
            logger.info(f"   üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: {hashtags}")
            logger.info(f"   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            logger.info(f"   üé¨ –ú–µ–¥–∏–∞: {media_type}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = self.db.add_content(
                message_id=message.message_id,
                channel_id=message.chat.id,
                channel_username=channel_username,
                category=category,
                title=title,
                text=text,
                media_type=media_type,
                media_file_id=media_file_id
            )
            
            if success:
                category_name = self.analyzer.get_category_name(category)
                hashtags_str = " ".join(hashtags) if hashtags else "–±–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤"
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_username} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}' (—Ö–µ—à—Ç–µ–≥–∏: {hashtags_str})")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
            if message:
                logger.error(f"   ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}")
                logger.error(f"   –¢–µ–∫—Å—Ç: {getattr(message, 'text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')}")
                logger.error(f"   –ö–∞–Ω–∞–ª: {getattr(message.chat, 'username', '–ù–µ—Ç username')}")
    
    async def forwarded_message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        message = update.message
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ forward_origin
        if not message or not hasattr(message, 'forward_origin') or not message.forward_origin:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø origin
        if message.forward_origin.type != MessageOriginType.CHANNEL:
            await message.reply_text("‚ö†Ô∏è –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
            return

        channel = message.forward_origin.chat
        channel_username = getattr(channel, 'username', None)
        channel_id = channel.id
        orig_message_id = message.forward_origin.message_id

        # –í–†–ï–ú–ï–ù–ù–û: –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
        # if channel_username != CHANNEL_USERNAME.replace('@', ''):
        #     await message.reply_text("‚ö†Ô∏è –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        #     return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        title, text = self.analyzer.extract_text_content(message)
        media_type, media_file_id = self.analyzer.extract_media_info(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        manual_category = None
        manual_description = None
        
        if hasattr(self, 'pending_categories') and user_id in self.pending_categories:
            pending_info = self.pending_categories[user_id]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
            time_diff = (message.date - pending_info['timestamp']).total_seconds()
            if time_diff < 300:  # 5 –º–∏–Ω—É—Ç
                manual_category = pending_info['category']
                manual_description = pending_info['description']
                # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                del self.pending_categories[user_id]
                logger.info(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {manual_category} - {manual_description}")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä—É—á–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é
        if manual_category:
            category = manual_category
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ç–µ–∫—Å—Ç—É
            if manual_description:
                text = f"{manual_description}\n\n{text}"
        else:
            category = self.analyzer.categorize_content(text, title)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üì± –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {orig_message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_username}:")
        logger.info(f"   –ú–µ–¥–∏–∞ —Ç–∏–ø: {media_type}")
        logger.info(f"   –ú–µ–¥–∏–∞ file_id: {media_file_id}")
        logger.info(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category} {'(—Ä—É—á–Ω–∞—è)' if manual_category else '(–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è)'}")
        logger.info(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title[:50]}...")
        logger.info(f"   –¢–µ–∫—Å—Ç: {text[:100]}...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞
        if media_type and media_file_id:
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                if media_type == 'video':
                    file_info = await self.application.bot.get_file(media_file_id)
                    logger.info(f"   ‚úÖ –ú–µ–¥–∏–∞ –¥–æ—Å—Ç—É–ø–Ω–æ: {file_info.file_id}")
                elif media_type == 'photo':
                    file_info = await self.application.bot.get_file(media_file_id)
                    logger.info(f"   ‚úÖ –ú–µ–¥–∏–∞ –¥–æ—Å—Ç—É–ø–Ω–æ: {file_info.file_id}")
                elif media_type == 'animation':
                    file_info = await self.application.bot.get_file(media_file_id)
                    logger.info(f"   ‚úÖ –ú–µ–¥–∏–∞ –¥–æ—Å—Ç—É–ø–Ω–æ: {file_info.file_id}")
                else:
                    logger.info(f"   ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {media_type}")
            except Exception as e:
                logger.warning(f"   ‚ö†Ô∏è –ú–µ–¥–∏–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
                media_file_id = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º file_id –µ—Å–ª–∏ –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        elif media_type and not media_file_id:
            logger.info(f"   ‚ö†Ô∏è –ú–µ–¥–∏–∞ {media_type} –µ—Å—Ç—å, –Ω–æ file_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            logger.info(f"   ‚ÑπÔ∏è –ú–µ–¥–∏–∞ –Ω–µ—Ç")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        success = self.db.add_content(
            message_id=orig_message_id,
            channel_id=channel_id,
            channel_username=channel_username,
            category=category,
            title=title,
            text=text,
            media_type=media_type,
            media_file_id=media_file_id
        )
        if success:
            category_name = self.analyzer.get_category_name(category)
            if manual_category:
                await message.reply_text(f"‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name} (—Ä—É—á–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è)")
            else:
                await message.reply_text(f"‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}")
        else:
            await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    
    async def load_posts_from_channel(self, update: Update, category: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            chat = await self.application.bot.get_chat(CHANNEL_USERNAME)
            logger.info(f"–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}, ID: {chat.id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            messages = []
            
            # –°–ø–æ—Å–æ–± 1: –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ get_updates (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ø–æ—Å–æ–±)
                try:
                    logger.info(f"–ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ get_updates...")
                    updates = await self.application.bot.get_updates(limit=100, timeout=1)
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                    
                    for update_item in updates:
                        if update_item.channel_post and update_item.channel_post.chat.username == CHANNEL_USERNAME.replace('@', ''):
                            messages.append(update_item.channel_post)
                        await update.message.reply_text(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ get_updates")
                except Exception as e1:
                    await update.message.reply_text(f"‚ö†Ô∏è get_updates –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e1}")
                    
                # –°–ø–æ—Å–æ–± 2: –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ webhook –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
                try:
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ...")
                    member = await self.application.bot.get_chat_member(CHANNEL_USERNAME, self.application.bot.id)
                    logger.info(f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {member.status}")
                    
                    if member.status in ['administrator', 'member']:
                        logger.info("‚úÖ –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ")
                        # –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ webhook –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤ –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–∞–Ω–∞–ª–∞ —Å–ª–æ–∂–Ω–æ
                        logger.warning("‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ –Ω—É–∂–µ–Ω webhook –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞")
                    else:
                        logger.warning(f"‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ: {member.status}")
                        
                except Exception as e2:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞: {e2}")
            
            if messages:
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
                processed_count = 0
                for message in messages:
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                        title, text = self.analyzer.extract_text_content(message)
                        media_type, media_file_id = self.analyzer.extract_media_info(message)
                        
                        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                        message_category = self.analyzer.categorize_content(text, title)
                        
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id}: –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{message_category}', –Ω—É–∂–Ω–∞ '{category}'")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        if message_category == category:
                            # –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞
                            channel_username = message.chat.username or CHANNEL_USERNAME.replace('@', '')
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç
                            existing_post = self.db.get_content_by_message_id(message.message_id)
                            if existing_post:
                                logger.info(f"–ü–æ—Å—Ç {message.message_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ")
                                continue
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            success = self.db.add_content(
                                message_id=message.message_id,
                                channel_id=message.chat.id,
                                channel_username=channel_username,
                                category=message_category,
                                title=title,
                                text=text,
                                media_type=media_type,
                                media_file_id=media_file_id
                            )
                            
                            if success:
                                category_name = self.analyzer.get_category_name(message_category)
                                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'")
                                processed_count += 1
                            else:
                                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id}")
                                
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}: {e}")
                
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
                return processed_count > 0
            else:
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    async def load_history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ @nikitaFlooDed...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            chat = await self.application.bot.get_chat(CHANNEL_USERNAME)
            await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                channel_id = chat.id
                await update.message.reply_text(f"üì• –ü–æ–ª—É—á–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ (ID: {channel_id})...")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ get_updates
                messages = []
                
                    try:
                        updates = await self.application.bot.get_updates(limit=100, timeout=1)
                    for update_item in updates:
                        if update_item.channel_post and update_item.channel_post.chat.username == CHANNEL_USERNAME.replace('@', ''):
                            messages.append(update_item.channel_post)
                        await update.message.reply_text(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ get_updates")
                except Exception as e1:
                    await update.message.reply_text(f"‚ö†Ô∏è get_updates –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e1}")
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
                        try:
                        member = await self.application.bot.get_chat_member(CHANNEL_USERNAME, self.application.bot.id)
                        await update.message.reply_text(f"üë§ –ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {member.status}")
                        
                        if member.status in ['administrator', 'member']:
                            await update.message.reply_text("‚úÖ –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ, –Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω—É–∂–µ–Ω webhook")
                        else:
                            await update.message.reply_text(f"‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ: {member.status}")
                    except Exception as e2:
                        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞: {e2}")
                    
                else:
                    await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞.")
                
            except Exception as e:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–∞–Ω–∞–ª–∞: {e}\n\n"
                    "üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ webhook –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /load_hashtag #–º–µ–º—ã"
                )
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞–Ω–∞–ª—É: {e}\n\n"
                "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            )
    
    async def debug_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        await update.message.reply_text("üîç –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            chat = await self.application.bot.get_chat(CHANNEL_USERNAME)
            await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}, ID: {chat.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            try:
                member = await self.application.bot.get_chat_member(CHANNEL_USERNAME, self.application.bot.id)
                await update.message.reply_text(f"üë§ –ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {member.status}")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ
            stats = self.db.get_stats()
            await update.message.reply_text(f"üìä –ü–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ: {sum(stats.values()) if stats else 0}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ challenges
            challenges = self.db.get_content_by_category('challenges', limit=10)
            await update.message.reply_text(f"üéØ –ü–æ—Å—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ challenges: {len(challenges)}")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
    
    async def category_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –ø–æ—Å—Ç–æ–≤"""
        if not context.args or len(context.args) < 2:
            categories_text = "üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
            for category_key, category_name in self.analyzer.get_all_categories().items():
                categories_text += f"‚Ä¢ {category_key} - {category_name}\n"
            
            await update.message.reply_text(
                f"üè∑Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /category <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–æ–ø–∏—Å–∞–Ω–∏–µ>\n\n"
                f"–ü—Ä–∏–º–µ—Ä—ã:\n"
                f"/category challenges –ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞ –æ—Ç–∂–∏–º–∞–Ω–∏—è\n"
                f"/category memes –°–º–µ—à–Ω–æ–π –º–µ–º –ø—Ä–æ —Å–ø–æ—Ä—Ç\n\n"
                f"{categories_text}\n"
                f"üí° –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!"
            )
            return
        
        category = context.args[0].lower()
        description = " ".join(context.args[1:])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if category not in self.analyzer.get_all_categories():
            await update.message.reply_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–µ
        user_id = update.message.from_user.id
        if not hasattr(self, 'pending_categories'):
            self.pending_categories = {}
        
        self.pending_categories[user_id] = {
            'category': category,
            'description': description,
            'timestamp': update.message.date
        }
        
        category_name = self.analyzer.get_category_name(category)
        await update.message.reply_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
            f"üí° –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!"
        )
    
    async def load_posts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞...")
        await self.load_all_posts_on_startup()
        await update.message.reply_text("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    async def load_hashtag_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            chat = await self.application.bot.get_chat(CHANNEL_USERNAME)
            logger.info(f"–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}, ID: {chat.id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            messages = []
            
            # –°–ø–æ—Å–æ–± 1: –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ get_updates (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ø–æ—Å–æ–±)
            try:
                logger.info(f"–ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ get_updates...")
                updates = await self.application.bot.get_updates(limit=100, timeout=1)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                
                for update_item in updates:
                    if update_item.channel_post and update_item.channel_post.chat.username == CHANNEL_USERNAME.replace('@', ''):
                        messages.append(update_item.channel_post)
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: {update_item.channel_post.message_id}")
                
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ get_updates")
            except Exception as e1:
                logger.warning(f"‚ùå get_updates –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e1}")
                
                # –°–ø–æ—Å–æ–± 2: –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ webhook –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
                try:
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ...")
                    member = await self.application.bot.get_chat_member(CHANNEL_USERNAME, self.application.bot.id)
                    logger.info(f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {member.status}")
                    
                    if member.status in ['administrator', 'member']:
                        logger.info("‚úÖ –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ")
                        # –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ webhook –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤ –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–∞–Ω–∞–ª–∞ —Å–ª–æ–∂–Ω–æ
                        logger.warning("‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ –Ω—É–∂–µ–Ω webhook –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞")
                    else:
                        logger.warning(f"‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ: {member.status}")
                        
                except Exception as e2:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞: {e2}")
            
            if messages:
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
                processed_count = 0
                for message in messages:
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                        title, text = self.analyzer.extract_text_content(message)
                        media_type, media_file_id = self.analyzer.extract_media_info(message)
                        
                        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                        message_category = self.analyzer.categorize_content(text, title)
                        
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id}: –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{message_category}', –Ω—É–∂–Ω–∞ '{category}'")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        if message_category == category:
                            # –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞
                            channel_username = message.chat.username or CHANNEL_USERNAME.replace('@', '')
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç
                            existing_post = self.db.get_content_by_message_id(message.message_id)
                            if existing_post:
                                logger.info(f"–ü–æ—Å—Ç {message.message_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ")
                                continue
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            success = self.db.add_content(
                                message_id=message.message_id,
                                channel_id=message.chat.id,
                                channel_username=channel_username,
                                category=message_category,
                                title=title,
                                text=text,
                                media_type=media_type,
                                media_file_id=media_file_id
                            )
                            
                            if success:
                                category_name = self.analyzer.get_category_name(message_category)
                                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'")
                                processed_count += 1
                            else:
                                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id}")
                                
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}: {e}")
                
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
                return processed_count > 0
            else:
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def load_all_posts_on_startup(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞...")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            await asyncio.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            try:
                chat = await self.application.bot.get_chat(CHANNEL_USERNAME)
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}, ID: {chat.id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
                try:
                    member = await self.application.bot.get_chat_member(CHANNEL_USERNAME, self.application.bot.id)
                    logger.info(f"üë§ –ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {member.status}")
                    
                    if member.status not in ['administrator', 'member']:
                        logger.warning(f"‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ: {member.status}")
                        return
                        
                except Exception as e:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞: {e}")
                    return
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ get_updates
                messages = []
                try:
                    logger.info("üì• –ü–æ–ª—É—á–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞...")
                    updates = await self.application.bot.get_updates(limit=100, timeout=1)
                    for update_item in updates:
                        if update_item.channel_post and update_item.channel_post.chat.username == CHANNEL_USERNAME.replace('@', ''):
                            messages.append(update_item.channel_post)
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞")
                except Exception as e:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    return
                
                if messages:
                    processed_count = 0
                    for message in messages:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç
                            existing_post = self.db.get_content_by_message_id(message.message_id)
                            if existing_post:
                                logger.info(f"–ü–æ—Å—Ç {message.message_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ")
                                continue
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                            title, text = self.analyzer.extract_text_content(message)
                            media_type, media_file_id = self.analyzer.extract_media_info(message)
                            
                            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                            category = self.analyzer.categorize_content(text, title)
                            
                            # –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞
                            channel_username = message.chat.username or CHANNEL_USERNAME.replace('@', '')
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            success = self.db.add_content(
                                message_id=message.message_id,
                                channel_id=message.chat.id,
                                channel_username=channel_username,
                                category=category,
                                title=title,
                                text=text,
                                media_type=media_type,
                                media_file_id=media_file_id
                            )
                            
                            if success:
                                category_name = self.analyzer.get_category_name(category)
                                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'")
                                processed_count += 1
                                
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}: {e}")
                    
                    logger.info(f"‚úÖ –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞")
                else:
                    logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞–Ω–∞–ª—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
                
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Fitness Content Sorter Bot...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        async def run_bot_with_auto_load():
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.application.initialize()
            await self.application.start()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            await self.load_all_posts_on_startup()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
            async def auto_load_task():
                while True:
                    try:
                        await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                        await self.auto_load_new_posts()
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                        await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            asyncio.create_task(auto_load_task())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.application.run_polling(allowed_updates=Update.ALL_TYPES)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(run_bot_with_auto_load())

if __name__ == "__main__":
    bot = ContentBot()
    bot.run() 