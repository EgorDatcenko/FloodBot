#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º
"""

import os
import sqlite3
import time
import subprocess
import sys

def check_and_fix_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db_path = "content_bot.db"
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    if os.path.exists(db_path):
        try:
            with sqlite3.connect(db_path, timeout=5.0) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM content")
                count = cursor.fetchone()[0]
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞, –∑–∞–ø–∏—Å–µ–π: {count}")
        except sqlite3.OperationalError as e:
            if "database is locked" in str(e):
                print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, —É–¥–∞–ª—è—é...")
                os.remove(db_path)
                print("‚úÖ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            if os.path.exists(db_path):
                os.remove(db_path)
                print("‚úÖ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω")

def add_test_data():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    db_path = "content_bot.db"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = [
        (1, -100123456789, "challenges", "–ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≤—ã–∑–æ–≤—É #—á–µ–ª–ª–µ–Ω–¥–∂ üí™", None, None),
        (2, -100123456789, "challenges", "–ù–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂", "–ù–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ! #—á–µ–ª–µ–Ω–¥–∂ #–≤—ã–∑–æ–≤ #—Ñ–∏—Ç–Ω–µ—Å", None, None),
        (3, -100123456789, "challenges", "–ß–µ–ª–ª–µ–Ω–¥–∂ –©–µ–ª–∫—É–Ω—á–∏–∫", '---------- ‚ö†Ô∏è –ß–ï–õ–ï–ù–î–ñ ‚ö†Ô∏è ----------\n"–©–µ–ª–∫—É–Ω—á–∏–∫"\n–ò–ù–í–ï–ù–¢–ê–†–¨:\n- –ì–†–ï–¶–ö–ò–ï –û–†–ï–•–ò (üå∞)\n- –ü–ê–õ–¨–¶–´ (–±–æ–ª—å—à–æ–π/—Å—Ä/—É–∫–∞–∑–∞—Ç)\n–ù–ï –ó–ê–ë–´–í–ê–ï–ú:\n"–ú—É–∂–∏—á–∫–∏, –∫–æ–º—É –Ω–µ —Å–ª–∞–±–æ, –∂–¥—É –æ—Ç –≤–∞—Å [–í–ò–î–û–°–´] –∏ [–û—Ç–≤–µ—Ç–Ω—ã–µ –ó–ê–î–ê–ù–ò–Ø] –≤ –∫–æ–º–º–µ–Ω—Ç—ã! #—á–µ–ª–µ–Ω–¥–∂"', None, None),
        (4, -100123456789, "power_results", "–ú–æ–π —Ä–µ–∫–æ—Ä–¥", "–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –≤ –∂–∏–º–µ –ª–µ–∂–∞! #—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã #—Å–∏–ª–∞", None, None),
        (5, -100123456789, "sport_tips", "–°–æ–≤–µ—Ç –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ", "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è #—Å–æ–≤–µ—Ç—ã #—Ç–µ—Ö–Ω–∏–∫–∞", None, None),
        (6, -100123456789, "exercises", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–Ω—è", "–¢–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π #—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è #—Ñ–∏—Ç–Ω–µ—Å", None, None),
        (7, -100123456789, "memes", "–ú–µ–º –∏–∑ –∑–∞–ª–∞", "–ó–∞–±–∞–≤–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª–µ #–º–µ–º—ã #—é–º–æ—Ä", None, None),
    ]
    
    try:
        with sqlite3.connect(db_path, timeout=60.0) as conn:
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS content (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    message_id INTEGER UNIQUE,
                    channel_id INTEGER,
                    category TEXT,
                    title TEXT,
                    text TEXT,
                    media_type TEXT,
                    media_file_id TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS stats (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    category TEXT,
                    count INTEGER DEFAULT 0,
                    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            for data in test_data:
                cursor.execute('''
                    INSERT OR REPLACE INTO content 
                    (message_id, channel_id, category, title, text, media_type, media_file_id)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', data)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {data[3]}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute('''
                INSERT OR REPLACE INTO stats (category, count, last_updated)
                SELECT category, COUNT(*), CURRENT_TIMESTAMP
                FROM content GROUP BY category
            ''')
            
            conn.commit()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def test_bot():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        from config import BOT_TOKEN, CATEGORIES
        from database import Database
        from content_analyzer import ContentAnalyzer
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(CATEGORIES)}")
        
        db = Database()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        analyzer = ContentAnalyzer()
        print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é
        test_text = "#—á–µ–ª–ª–µ–Ω–¥–∂ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≤—ã–∑–æ–≤—É!"
        category = analyzer.categorize_content(test_text)
        category_name = analyzer.get_category_name(category)
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: '{test_text}' ‚Üí {category_name}")
        
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º...")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    check_and_fix_database()
    print()
    
    # 2. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    add_test_data()
    print()
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
    test_bot()
    print()
    
    print("=" * 50)
    print("‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞: py bot.py")

if __name__ == "__main__":
    main() 